/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPAddressesInitParameters struct {
}

type IPAddressesObservation struct {

	// The IP address of the backend server. Example: 10.0.0.3
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// IP version associated with the backend set.
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Whether the IP address is public or private.
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// An object representing a reserved IP address to be attached or that is already attached to a network load balancer.
	ReservedIP []ReservedIPObservation `json:"reservedIp,omitempty" tf:"reserved_ip,omitempty"`
}

type IPAddressesParameters struct {
}

type LoadBalancerNetworkLoadBalancerInitParameters struct {

	// (Updatable) IPv6 address to be assigned to the network load balancer being created. This IP address has to be part of one of the prefixes supported by the subnet. Example: "2607:9b80:9a0a:9a7e:abcd:ef01:2345:6789"
	AssignedIPv6 *string `json:"assignedIpv6,omitempty" tf:"assigned_ipv6,omitempty"`

	// Private IP address to be assigned to the network load balancer being created. This IP address has to be in the CIDR range of the subnet where network load balancer is being created Example: "10.0.0.1"
	AssignedPrivateIPv4 *string `json:"assignedPrivateIpv4,omitempty" tf:"assigned_private_ipv4,omitempty"`

	// (Updatable) The OCID of the compartment containing the network load balancer.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: {"foo-namespace.bar-key": "value"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Network load balancer identifier, which can be renamed.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: {"bar-key": "value"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) This parameter can be enabled only if backends are compute OCIDs. When enabled, the skipSourceDestinationCheck parameter is automatically enabled on the load balancer VNIC, and packets are sent to the backend with the entire IP header intact.
	IsPreserveSourceDestination *bool `json:"isPreserveSourceDestination,omitempty" tf:"is_preserve_source_destination,omitempty"`

	// Whether the network load balancer has a virtual cloud network-local (private) IP address.
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	// (Updatable) This can only be enabled when NLB is working in transparent mode with source destination header preservation enabled.  This removes the additional dependency from NLB backends(like Firewalls) to perform SNAT.
	IsSymmetricHashEnabled *bool `json:"isSymmetricHashEnabled,omitempty" tf:"is_symmetric_hash_enabled,omitempty"`

	// (Updatable) An array of network security groups OCIDs associated with the network load balancer.
	// +listType=set
	NetworkSecurityGroupIds []*string `json:"networkSecurityGroupIds,omitempty" tf:"network_security_group_ids,omitempty"`

	// (Updatable) IP version associated with the NLB.
	NlbIPVersion *string `json:"nlbIpVersion,omitempty" tf:"nlb_ip_version,omitempty"`

	// An array of reserved Ips.
	ReservedIps []ReservedIpsInitParameters `json:"reservedIps,omitempty" tf:"reserved_ips,omitempty"`

	// (Updatable) ZPR tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"oracle-zpr": {"td": {"value": "42", "mode": "audit"}}}
	// +mapType=granular
	SecurityAttributes map[string]*string `json:"securityAttributes,omitempty" tf:"security_attributes,omitempty"`

	// The subnet in which the network load balancer is spawned OCIDs.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.Subnet
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// IPv6 subnet prefix selection. If Ipv6 subnet prefix is passed, Nlb Ipv6 Address would be assign within the cidr block. NLB has to be dual or single stack ipv6 to support this.
	SubnetIpv6Cidr *string `json:"subnetIpv6Cidr,omitempty" tf:"subnet_ipv6cidr,omitempty"`
}

type LoadBalancerNetworkLoadBalancerObservation struct {

	// (Updatable) IPv6 address to be assigned to the network load balancer being created. This IP address has to be part of one of the prefixes supported by the subnet. Example: "2607:9b80:9a0a:9a7e:abcd:ef01:2345:6789"
	AssignedIPv6 *string `json:"assignedIpv6,omitempty" tf:"assigned_ipv6,omitempty"`

	// Private IP address to be assigned to the network load balancer being created. This IP address has to be in the CIDR range of the subnet where network load balancer is being created Example: "10.0.0.1"
	AssignedPrivateIPv4 *string `json:"assignedPrivateIpv4,omitempty" tf:"assigned_private_ipv4,omitempty"`

	// (Updatable) The OCID of the compartment containing the network load balancer.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: {"foo-namespace.bar-key": "value"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Network load balancer identifier, which can be renamed.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: {"bar-key": "value"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// OCID of the reserved public IP address created with the virtual cloud network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An array of IP addresses.
	IPAddresses []IPAddressesObservation `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// (Updatable) This parameter can be enabled only if backends are compute OCIDs. When enabled, the skipSourceDestinationCheck parameter is automatically enabled on the load balancer VNIC, and packets are sent to the backend with the entire IP header intact.
	IsPreserveSourceDestination *bool `json:"isPreserveSourceDestination,omitempty" tf:"is_preserve_source_destination,omitempty"`

	// Whether the network load balancer has a virtual cloud network-local (private) IP address.
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	// (Updatable) This can only be enabled when NLB is working in transparent mode with source destination header preservation enabled.  This removes the additional dependency from NLB backends(like Firewalls) to perform SNAT.
	IsSymmetricHashEnabled *bool `json:"isSymmetricHashEnabled,omitempty" tf:"is_symmetric_hash_enabled,omitempty"`

	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	// (Updatable) An array of network security groups OCIDs associated with the network load balancer.
	// +listType=set
	NetworkSecurityGroupIds []*string `json:"networkSecurityGroupIds,omitempty" tf:"network_security_group_ids,omitempty"`

	// (Updatable) IP version associated with the NLB.
	NlbIPVersion *string `json:"nlbIpVersion,omitempty" tf:"nlb_ip_version,omitempty"`

	// An array of reserved Ips.
	ReservedIps []ReservedIpsObservation `json:"reservedIps,omitempty" tf:"reserved_ips,omitempty"`

	// (Updatable) ZPR tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"oracle-zpr": {"td": {"value": "42", "mode": "audit"}}}
	// +mapType=granular
	SecurityAttributes map[string]*string `json:"securityAttributes,omitempty" tf:"security_attributes,omitempty"`

	// The current state of the network load balancer.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The subnet in which the network load balancer is spawned OCIDs.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// IPv6 subnet prefix selection. If Ipv6 subnet prefix is passed, Nlb Ipv6 Address would be assign within the cidr block. NLB has to be dual or single stack ipv6 to support this.
	SubnetIpv6Cidr *string `json:"subnetIpv6Cidr,omitempty" tf:"subnet_ipv6cidr,omitempty"`

	// Key-value pair representing system tags' keys and values scoped to a namespace. Example: {"bar-key": "value"}
	// +mapType=granular
	SystemTags map[string]*string `json:"systemTags,omitempty" tf:"system_tags,omitempty"`

	// The date and time the network load balancer was created, in the format defined by RFC3339.  Example: 2020-05-01T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The time the network load balancer was updated. An RFC3339 formatted date-time string.  Example: 2020-05-01T22:10:29.600Z
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`
}

type LoadBalancerNetworkLoadBalancerParameters struct {

	// (Updatable) IPv6 address to be assigned to the network load balancer being created. This IP address has to be part of one of the prefixes supported by the subnet. Example: "2607:9b80:9a0a:9a7e:abcd:ef01:2345:6789"
	// +kubebuilder:validation:Optional
	AssignedIPv6 *string `json:"assignedIpv6,omitempty" tf:"assigned_ipv6,omitempty"`

	// Private IP address to be assigned to the network load balancer being created. This IP address has to be in the CIDR range of the subnet where network load balancer is being created Example: "10.0.0.1"
	// +kubebuilder:validation:Optional
	AssignedPrivateIPv4 *string `json:"assignedPrivateIpv4,omitempty" tf:"assigned_private_ipv4,omitempty"`

	// (Updatable) The OCID of the compartment containing the network load balancer.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: {"foo-namespace.bar-key": "value"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Network load balancer identifier, which can be renamed.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: {"bar-key": "value"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) This parameter can be enabled only if backends are compute OCIDs. When enabled, the skipSourceDestinationCheck parameter is automatically enabled on the load balancer VNIC, and packets are sent to the backend with the entire IP header intact.
	// +kubebuilder:validation:Optional
	IsPreserveSourceDestination *bool `json:"isPreserveSourceDestination,omitempty" tf:"is_preserve_source_destination,omitempty"`

	// Whether the network load balancer has a virtual cloud network-local (private) IP address.
	// +kubebuilder:validation:Optional
	IsPrivate *bool `json:"isPrivate,omitempty" tf:"is_private,omitempty"`

	// (Updatable) This can only be enabled when NLB is working in transparent mode with source destination header preservation enabled.  This removes the additional dependency from NLB backends(like Firewalls) to perform SNAT.
	// +kubebuilder:validation:Optional
	IsSymmetricHashEnabled *bool `json:"isSymmetricHashEnabled,omitempty" tf:"is_symmetric_hash_enabled,omitempty"`

	// (Updatable) An array of network security groups OCIDs associated with the network load balancer.
	// +kubebuilder:validation:Optional
	// +listType=set
	NetworkSecurityGroupIds []*string `json:"networkSecurityGroupIds,omitempty" tf:"network_security_group_ids,omitempty"`

	// (Updatable) IP version associated with the NLB.
	// +kubebuilder:validation:Optional
	NlbIPVersion *string `json:"nlbIpVersion,omitempty" tf:"nlb_ip_version,omitempty"`

	// An array of reserved Ips.
	// +kubebuilder:validation:Optional
	ReservedIps []ReservedIpsParameters `json:"reservedIps,omitempty" tf:"reserved_ips,omitempty"`

	// (Updatable) ZPR tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"oracle-zpr": {"td": {"value": "42", "mode": "audit"}}}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	SecurityAttributes map[string]*string `json:"securityAttributes,omitempty" tf:"security_attributes,omitempty"`

	// The subnet in which the network load balancer is spawned OCIDs.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`

	// IPv6 subnet prefix selection. If Ipv6 subnet prefix is passed, Nlb Ipv6 Address would be assign within the cidr block. NLB has to be dual or single stack ipv6 to support this.
	// +kubebuilder:validation:Optional
	SubnetIpv6Cidr *string `json:"subnetIpv6Cidr,omitempty" tf:"subnet_ipv6cidr,omitempty"`
}

type ReservedIPInitParameters struct {
}

type ReservedIPObservation struct {

	// OCID of the reserved public IP address created with the virtual cloud network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReservedIPParameters struct {
}

type ReservedIpsInitParameters struct {

	// OCID of the reserved public IP address created with the virtual cloud network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReservedIpsObservation struct {

	// OCID of the reserved public IP address created with the virtual cloud network.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ReservedIpsParameters struct {

	// OCID of the reserved public IP address created with the virtual cloud network.
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

// LoadBalancerNetworkLoadBalancerSpec defines the desired state of LoadBalancerNetworkLoadBalancer
type LoadBalancerNetworkLoadBalancerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LoadBalancerNetworkLoadBalancerParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LoadBalancerNetworkLoadBalancerInitParameters `json:"initProvider,omitempty"`
}

// LoadBalancerNetworkLoadBalancerStatus defines the observed state of LoadBalancerNetworkLoadBalancer.
type LoadBalancerNetworkLoadBalancerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LoadBalancerNetworkLoadBalancerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LoadBalancerNetworkLoadBalancer is the Schema for the LoadBalancerNetworkLoadBalancers API. Provides the Network Load Balancer resource in Oracle Cloud Infrastructure Network Load Balancer service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type LoadBalancerNetworkLoadBalancer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.displayName) || (has(self.initProvider) && has(self.initProvider.displayName))",message="spec.forProvider.displayName is a required parameter"
	Spec   LoadBalancerNetworkLoadBalancerSpec   `json:"spec"`
	Status LoadBalancerNetworkLoadBalancerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LoadBalancerNetworkLoadBalancerList contains a list of LoadBalancerNetworkLoadBalancers
type LoadBalancerNetworkLoadBalancerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LoadBalancerNetworkLoadBalancer `json:"items"`
}

// Repository type metadata.
var (
	LoadBalancerNetworkLoadBalancer_Kind             = "LoadBalancerNetworkLoadBalancer"
	LoadBalancerNetworkLoadBalancer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LoadBalancerNetworkLoadBalancer_Kind}.String()
	LoadBalancerNetworkLoadBalancer_KindAPIVersion   = LoadBalancerNetworkLoadBalancer_Kind + "." + CRDGroupVersion.String()
	LoadBalancerNetworkLoadBalancer_GroupVersionKind = CRDGroupVersion.WithKind(LoadBalancerNetworkLoadBalancer_Kind)
)

func init() {
	SchemeBuilder.Register(&LoadBalancerNetworkLoadBalancer{}, &LoadBalancerNetworkLoadBalancerList{})
}
