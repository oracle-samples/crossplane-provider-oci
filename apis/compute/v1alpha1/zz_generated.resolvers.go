/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Instance.
	apisresolver "github.com/oracle/provider-oci/internal/apis"
)

func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CompartmentIDRef,
			Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CreateVnicDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "NetworkSecurityGroup", "NetworkSecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIds),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIdsRefs,
				Selector:      mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIds")
		}
		mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.CreateVnicDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetIDRef,
				Selector:     mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetID")
		}
		mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.CreateVnicDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "Vlan", "VlanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CreateVnicDetails[i3].VlanID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CreateVnicDetails[i3].VlanIDRef,
				Selector:     mg.Spec.ForProvider.CreateVnicDetails[i3].VlanIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CreateVnicDetails[i3].VlanID")
		}
		mg.Spec.ForProvider.CreateVnicDetails[i3].VlanID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CreateVnicDetails[i3].VlanIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "DedicatedVMHost", "DedicatedVMHostList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DedicatedVMHostID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DedicatedVMHostIDRef,
			Selector:     mg.Spec.ForProvider.DedicatedVMHostIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DedicatedVMHostID")
	}
	mg.Spec.ForProvider.DedicatedVMHostID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DedicatedVMHostIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.SourceDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "Image", "ImageList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceDetails[i3].SourceID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.SourceDetails[i3].SourceIDRef,
				Selector:     mg.Spec.ForProvider.SourceDetails[i3].SourceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SourceDetails[i3].SourceID")
		}
		mg.Spec.ForProvider.SourceDetails[i3].SourceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SourceDetails[i3].SourceIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CompartmentIDRef,
			Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.CreateVnicDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "NetworkSecurityGroup", "NetworkSecurityGroupList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.InitProvider.CreateVnicDetails[i3].NsgIds),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.InitProvider.CreateVnicDetails[i3].NsgIdsRefs,
				Selector:      mg.Spec.InitProvider.CreateVnicDetails[i3].NsgIdsSelector,
				To:            reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CreateVnicDetails[i3].NsgIds")
		}
		mg.Spec.InitProvider.CreateVnicDetails[i3].NsgIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.InitProvider.CreateVnicDetails[i3].NsgIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.CreateVnicDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "Subnet", "SubnetList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CreateVnicDetails[i3].SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CreateVnicDetails[i3].SubnetIDRef,
				Selector:     mg.Spec.InitProvider.CreateVnicDetails[i3].SubnetIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CreateVnicDetails[i3].SubnetID")
		}
		mg.Spec.InitProvider.CreateVnicDetails[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CreateVnicDetails[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.CreateVnicDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "Vlan", "VlanList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CreateVnicDetails[i3].VlanID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.CreateVnicDetails[i3].VlanIDRef,
				Selector:     mg.Spec.InitProvider.CreateVnicDetails[i3].VlanIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.CreateVnicDetails[i3].VlanID")
		}
		mg.Spec.InitProvider.CreateVnicDetails[i3].VlanID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.CreateVnicDetails[i3].VlanIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "DedicatedVMHost", "DedicatedVMHostList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DedicatedVMHostID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DedicatedVMHostIDRef,
			Selector:     mg.Spec.InitProvider.DedicatedVMHostIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DedicatedVMHostID")
	}
	mg.Spec.InitProvider.DedicatedVMHostID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DedicatedVMHostIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.SourceDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("compute.oci.upbound.io", "v1alpha1", "Image", "ImageList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.SourceDetails[i3].SourceID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.SourceDetails[i3].SourceIDRef,
				Selector:     mg.Spec.InitProvider.SourceDetails[i3].SourceIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.SourceDetails[i3].SourceID")
		}
		mg.Spec.InitProvider.SourceDetails[i3].SourceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.SourceDetails[i3].SourceIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InstanceConfiguration.
func (mg *InstanceConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CompartmentIDRef,
			Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CompartmentIDRef,
			Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}
