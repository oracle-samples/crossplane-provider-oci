/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CapacityBinsInitParameters struct {
}

type CapacityBinsObservation struct {

	// Zero-based index for the corresponding capacity bucket.
	CapacityIndex *float64 `json:"capacityIndex,omitempty" tf:"capacity_index,omitempty"`

	// The remaining memory of the capacity bucket, in GBs.
	RemainingMemoryInGbs *float64 `json:"remainingMemoryInGbs,omitempty" tf:"remaining_memory_in_gbs,omitempty"`

	// The available OCPUs of the capacity bucket.
	RemainingOcpus *float64 `json:"remainingOcpus,omitempty" tf:"remaining_ocpus,omitempty"`

	// List of VMI shapes supported on each capacity bucket.
	SupportedShapes []*string `json:"supportedShapes,omitempty" tf:"supported_shapes,omitempty"`

	// The total memory of the capacity bucket, in GBs.
	TotalMemoryInGbs *float64 `json:"totalMemoryInGbs,omitempty" tf:"total_memory_in_gbs,omitempty"`

	// The total OCPUs of the capacity bucket.
	TotalOcpus *float64 `json:"totalOcpus,omitempty" tf:"total_ocpus,omitempty"`
}

type CapacityBinsParameters struct {
}

type DedicatedVmHostInitParameters struct {

	// The availability domain of the dedicated virtual machine host.  Example: Uocm:PHX-AD-1
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	// (Updatable) The OCID of the compartment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The dedicated virtual machine host shape. The shape determines the number of CPUs and other resources available for VM instances launched on the dedicated virtual machine host.
	DedicatedVMHostShape *string `json:"dedicatedVmHostShape,omitempty" tf:"dedicated_vm_host_shape,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The fault domain for the dedicated virtual machine host's assigned instances. For more information, see Fault Domains. If you do not specify the fault domain, the system selects one for you. To change the fault domain for a dedicated virtual machine host, delete it and create a new dedicated virtual machine host in the preferred fault domain.
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// Generic placement details field which is overloaded with bare metal host id or host group id based on the resource we are targeting to launch.
	PlacementConstraintDetails []PlacementConstraintDetailsInitParameters `json:"placementConstraintDetails,omitempty" tf:"placement_constraint_details,omitempty"`
}

type DedicatedVmHostObservation struct {

	// The availability domain of the dedicated virtual machine host.  Example: Uocm:PHX-AD-1
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	// A list of total and remaining CPU & memory per capacity bucket.
	CapacityBins []CapacityBinsObservation `json:"capacityBins,omitempty" tf:"capacity_bins,omitempty"`

	// (Updatable) The OCID of the compartment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The OCID of the compute bare metal host.
	ComputeBareMetalHostID *string `json:"computeBareMetalHostId,omitempty" tf:"compute_bare_metal_host_id,omitempty"`

	// The dedicated virtual machine host shape. The shape determines the number of CPUs and other resources available for VM instances launched on the dedicated virtual machine host.
	DedicatedVMHostShape *string `json:"dedicatedVmHostShape,omitempty" tf:"dedicated_vm_host_shape,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The fault domain for the dedicated virtual machine host's assigned instances. For more information, see Fault Domains. If you do not specify the fault domain, the system selects one for you. To change the fault domain for a dedicated virtual machine host, delete it and create a new dedicated virtual machine host in the preferred fault domain.
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// The OCID of the dedicated VM host.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Generic placement details field which is overloaded with bare metal host id or host group id based on the resource we are targeting to launch.
	PlacementConstraintDetails []PlacementConstraintDetailsObservation `json:"placementConstraintDetails,omitempty" tf:"placement_constraint_details,omitempty"`

	// The remaining memory of the capacity bucket, in GBs.
	RemainingMemoryInGbs *float64 `json:"remainingMemoryInGbs,omitempty" tf:"remaining_memory_in_gbs,omitempty"`

	// The available OCPUs of the capacity bucket.
	RemainingOcpus *float64 `json:"remainingOcpus,omitempty" tf:"remaining_ocpus,omitempty"`

	// The current state of the dedicated VM host.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the dedicated VM host was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The total memory of the capacity bucket, in GBs.
	TotalMemoryInGbs *float64 `json:"totalMemoryInGbs,omitempty" tf:"total_memory_in_gbs,omitempty"`

	// The total OCPUs of the capacity bucket.
	TotalOcpus *float64 `json:"totalOcpus,omitempty" tf:"total_ocpus,omitempty"`
}

type DedicatedVmHostParameters struct {

	// The availability domain of the dedicated virtual machine host.  Example: Uocm:PHX-AD-1
	// +kubebuilder:validation:Optional
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	// (Updatable) The OCID of the compartment.
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The dedicated virtual machine host shape. The shape determines the number of CPUs and other resources available for VM instances launched on the dedicated virtual machine host.
	// +kubebuilder:validation:Optional
	DedicatedVMHostShape *string `json:"dedicatedVmHostShape,omitempty" tf:"dedicated_vm_host_shape,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The fault domain for the dedicated virtual machine host's assigned instances. For more information, see Fault Domains. If you do not specify the fault domain, the system selects one for you. To change the fault domain for a dedicated virtual machine host, delete it and create a new dedicated virtual machine host in the preferred fault domain.
	// +kubebuilder:validation:Optional
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// Generic placement details field which is overloaded with bare metal host id or host group id based on the resource we are targeting to launch.
	// +kubebuilder:validation:Optional
	PlacementConstraintDetails []PlacementConstraintDetailsParameters `json:"placementConstraintDetails,omitempty" tf:"placement_constraint_details,omitempty"`
}

type PlacementConstraintDetailsInitParameters struct {

	// The OCID of the compute bare metal host.
	ComputeBareMetalHostID *string `json:"computeBareMetalHostId,omitempty" tf:"compute_bare_metal_host_id,omitempty"`

	// Determines the type of targeted launch.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PlacementConstraintDetailsObservation struct {

	// The OCID of the compute bare metal host.
	ComputeBareMetalHostID *string `json:"computeBareMetalHostId,omitempty" tf:"compute_bare_metal_host_id,omitempty"`

	// Determines the type of targeted launch.
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PlacementConstraintDetailsParameters struct {

	// The OCID of the compute bare metal host.
	// +kubebuilder:validation:Optional
	ComputeBareMetalHostID *string `json:"computeBareMetalHostId,omitempty" tf:"compute_bare_metal_host_id,omitempty"`

	// Determines the type of targeted launch.
	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// DedicatedVmHostSpec defines the desired state of DedicatedVmHost
type DedicatedVmHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DedicatedVmHostParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DedicatedVmHostInitParameters `json:"initProvider,omitempty"`
}

// DedicatedVmHostStatus defines the observed state of DedicatedVmHost.
type DedicatedVmHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DedicatedVmHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// DedicatedVmHost is the Schema for the DedicatedVmHosts API. Provides the Dedicated Vm Host resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type DedicatedVmHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.availabilityDomain) || (has(self.initProvider) && has(self.initProvider.availabilityDomain))",message="spec.forProvider.availabilityDomain is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compartmentId) || (has(self.initProvider) && has(self.initProvider.compartmentId))",message="spec.forProvider.compartmentId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.dedicatedVmHostShape) || (has(self.initProvider) && has(self.initProvider.dedicatedVmHostShape))",message="spec.forProvider.dedicatedVmHostShape is a required parameter"
	Spec   DedicatedVmHostSpec   `json:"spec"`
	Status DedicatedVmHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DedicatedVmHostList contains a list of DedicatedVmHosts
type DedicatedVmHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DedicatedVmHost `json:"items"`
}

// Repository type metadata.
var (
	DedicatedVmHost_Kind             = "DedicatedVmHost"
	DedicatedVmHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DedicatedVmHost_Kind}.String()
	DedicatedVmHost_KindAPIVersion   = DedicatedVmHost_Kind + "." + CRDGroupVersion.String()
	DedicatedVmHost_GroupVersionKind = CRDGroupVersion.WithKind(DedicatedVmHost_Kind)
)

func init() {
	SchemeBuilder.Register(&DedicatedVmHost{}, &DedicatedVmHostList{})
}
