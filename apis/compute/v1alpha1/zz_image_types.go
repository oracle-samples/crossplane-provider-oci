/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AgentFeaturesInitParameters struct {
}

type AgentFeaturesObservation struct {

	// This attribute is not used.
	IsManagementSupported *bool `json:"isManagementSupported,omitempty" tf:"is_management_supported,omitempty"`

	// This attribute is not used.
	IsMonitoringSupported *bool `json:"isMonitoringSupported,omitempty" tf:"is_monitoring_supported,omitempty"`
}

type AgentFeaturesParameters struct {
}

type ImageInitParameters struct {

	// (Updatable) The OCID of the compartment you want the image to be created in.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name for the image. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	ImageSourceDetails []ImageSourceDetailsInitParameters `json:"imageSourceDetails,omitempty" tf:"image_source_details,omitempty"`

	// The OCID of the instance you want to use as the basis for the image.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
	LaunchMode *string `json:"launchMode,omitempty" tf:"launch_mode,omitempty"`
}

type ImageObservation struct {

	// Oracle Cloud Agent features supported on the image.
	AgentFeatures []AgentFeaturesObservation `json:"agentFeatures,omitempty" tf:"agent_features,omitempty"`

	// The OCID of the image originally used to launch the instance.
	BaseImageID *string `json:"baseImageId,omitempty" tf:"base_image_id,omitempty"`

	// The size of the internal storage for this image that is subject to billing (1 GB = 1,073,741,824 bytes).  Example: 100
	BillableSizeInGbs *string `json:"billableSizeInGbs,omitempty" tf:"billable_size_in_gbs,omitempty"`

	// (Updatable) The OCID of the compartment you want the image to be created in.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Whether instances launched with this image can be used to create new images. For example, you cannot create an image of an Oracle Database instance.  Example: true
	CreateImageAllowed *bool `json:"createImageAllowed,omitempty" tf:"create_image_allowed,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name for the image. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// The OCID of the image.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImageSourceDetails []ImageSourceDetailsObservation `json:"imageSourceDetails,omitempty" tf:"image_source_details,omitempty"`

	// The OCID of the instance you want to use as the basis for the image.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
	LaunchMode *string `json:"launchMode,omitempty" tf:"launch_mode,omitempty"`

	// Options for tuning the compatibility and performance of VM shapes. The values that you specify override any default values.
	LaunchOptions []LaunchOptionsObservation `json:"launchOptions,omitempty" tf:"launch_options,omitempty"`

	// The listing type of the image. The default value is "NONE".
	ListingType *string `json:"listingType,omitempty" tf:"listing_type,omitempty"`

	// The image's operating system.  Example: Oracle Linux
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// The image's operating system version.  Example: 7.2
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" tf:"operating_system_version,omitempty"`

	// The boot volume size for an instance launched from this image (1 MB = 1,048,576 bytes). Note this is not the same as the size of the image when it was exported or the actual size of the image.  Example: 47694
	SizeInMbs *string `json:"sizeInMbs,omitempty" tf:"size_in_mbs,omitempty"`

	// The current state of the image.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the image was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type ImageParameters struct {

	// (Updatable) The OCID of the compartment you want the image to be created in.
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name for the image. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	ImageSourceDetails []ImageSourceDetailsParameters `json:"imageSourceDetails,omitempty" tf:"image_source_details,omitempty"`

	// The OCID of the instance you want to use as the basis for the image.
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Specifies the configuration mode for launching virtual machine (VM) instances. The configuration modes are:
	// +kubebuilder:validation:Optional
	LaunchMode *string `json:"launchMode,omitempty" tf:"launch_mode,omitempty"`
}

type ImageSourceDetailsInitParameters struct {

	// The Object Storage bucket for the image.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The Object Storage namespace for the image.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// The Object Storage name for the image.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// The image's operating system.  Example: Oracle Linux
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// The image's operating system version.  Example: 7.2
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" tf:"operating_system_version,omitempty"`

	// The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
	SourceImageType *string `json:"sourceImageType,omitempty" tf:"source_image_type,omitempty"`

	// The source type for the image. Use objectStorageTuple when specifying the namespace, bucket name, and object name. Use objectStorageUri when specifying the Object Storage URL.
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// The Object Storage URL for the image.
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`
}

type ImageSourceDetailsObservation struct {

	// The Object Storage bucket for the image.
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The Object Storage namespace for the image.
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// The Object Storage name for the image.
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// The image's operating system.  Example: Oracle Linux
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// The image's operating system version.  Example: 7.2
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" tf:"operating_system_version,omitempty"`

	// The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
	SourceImageType *string `json:"sourceImageType,omitempty" tf:"source_image_type,omitempty"`

	// The source type for the image. Use objectStorageTuple when specifying the namespace, bucket name, and object name. Use objectStorageUri when specifying the Object Storage URL.
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`

	// The Object Storage URL for the image.
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`
}

type ImageSourceDetailsParameters struct {

	// The Object Storage bucket for the image.
	// +kubebuilder:validation:Optional
	BucketName *string `json:"bucketName,omitempty" tf:"bucket_name,omitempty"`

	// The Object Storage namespace for the image.
	// +kubebuilder:validation:Optional
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	// The Object Storage name for the image.
	// +kubebuilder:validation:Optional
	ObjectName *string `json:"objectName,omitempty" tf:"object_name,omitempty"`

	// The image's operating system.  Example: Oracle Linux
	// +kubebuilder:validation:Optional
	OperatingSystem *string `json:"operatingSystem,omitempty" tf:"operating_system,omitempty"`

	// The image's operating system version.  Example: 7.2
	// +kubebuilder:validation:Optional
	OperatingSystemVersion *string `json:"operatingSystemVersion,omitempty" tf:"operating_system_version,omitempty"`

	// The format of the image to be imported.  Only monolithic images are supported. This attribute is not used for exported Oracle images with the Oracle Cloud Infrastructure image format. Allowed values are:
	// +kubebuilder:validation:Optional
	SourceImageType *string `json:"sourceImageType,omitempty" tf:"source_image_type,omitempty"`

	// The source type for the image. Use objectStorageTuple when specifying the namespace, bucket name, and object name. Use objectStorageUri when specifying the Object Storage URL.
	// +kubebuilder:validation:Optional
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`

	// The Object Storage URL for the image.
	// +kubebuilder:validation:Optional
	SourceURI *string `json:"sourceUri,omitempty" tf:"source_uri,omitempty"`
}

type LaunchOptionsInitParameters struct {
}

type LaunchOptionsObservation struct {

	// Emulation type for the boot volume.
	BootVolumeType *string `json:"bootVolumeType,omitempty" tf:"boot_volume_type,omitempty"`

	// Firmware used to boot VM. Select the option that matches your operating system.
	Firmware *string `json:"firmware,omitempty" tf:"firmware,omitempty"`

	// Whether to enable consistent volume naming feature. Defaults to false.
	IsConsistentVolumeNamingEnabled *bool `json:"isConsistentVolumeNamingEnabled,omitempty" tf:"is_consistent_volume_naming_enabled,omitempty"`

	// Deprecated. Instead use isPvEncryptionInTransitEnabled in LaunchInstanceDetails.
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// Emulation type for the physical network interface card (NIC).
	NetworkType *string `json:"networkType,omitempty" tf:"network_type,omitempty"`

	// Emulation type for volume.
	RemoteDataVolumeType *string `json:"remoteDataVolumeType,omitempty" tf:"remote_data_volume_type,omitempty"`
}

type LaunchOptionsParameters struct {
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageInitParameters `json:"initProvider,omitempty"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Image is the Schema for the Images API. Provides the Image resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compartmentId) || (has(self.initProvider) && has(self.initProvider.compartmentId))",message="spec.forProvider.compartmentId is a required parameter"
	Spec   ImageSpec   `json:"spec"`
	Status ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	Image_Kind             = "Image"
	Image_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Image_Kind}.String()
	Image_KindAPIVersion   = Image_Kind + "." + CRDGroupVersion.String()
	Image_GroupVersionKind = CRDGroupVersion.WithKind(Image_Kind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
