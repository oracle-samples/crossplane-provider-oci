/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha11 "github.com/oracle/provider-oci/apis/core/v1alpha1"
	v1alpha1 "github.com/oracle/provider-oci/apis/identity/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Backend.
func (mg *Backend) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.BackendsetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.BackendsetNameRef,
		Selector:     mg.Spec.ForProvider.BackendsetNameSelector,
		To: reference.To{
			List:    &BackendSetList{},
			Managed: &BackendSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.BackendsetName")
	}
	mg.Spec.ForProvider.BackendsetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.BackendsetNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this BackendSet.
func (mg *BackendSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Certificate.
func (mg *Certificate) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LBHostname.
func (mg *LBHostname) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Listener.
func (mg *Listener) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DefaultBackendSetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DefaultBackendSetNameRef,
		Selector:     mg.Spec.ForProvider.DefaultBackendSetNameSelector,
		To: reference.To{
			List:    &BackendSetList{},
			Managed: &BackendSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DefaultBackendSetName")
	}
	mg.Spec.ForProvider.DefaultBackendSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DefaultBackendSetNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.HostnameNames),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.HostnameNamesRefs,
		Selector:      mg.Spec.ForProvider.HostnameNamesSelector,
		To: reference.To{
			List:    &LBHostnameList{},
			Managed: &LBHostname{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.HostnameNames")
	}
	mg.Spec.ForProvider.HostnameNames = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.HostnameNamesRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathRouteSetName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PathRouteSetNameRef,
		Selector:     mg.Spec.ForProvider.PathRouteSetNameSelector,
		To: reference.To{
			List:    &PathRouteSetList{},
			Managed: &PathRouteSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PathRouteSetName")
	}
	mg.Spec.ForProvider.PathRouteSetName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PathRouteSetNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RoutingPolicyName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RoutingPolicyNameRef,
		Selector:     mg.Spec.ForProvider.RoutingPolicyNameSelector,
		To: reference.To{
			List:    &RoutingPolicyList{},
			Managed: &RoutingPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RoutingPolicyName")
	}
	mg.Spec.ForProvider.RoutingPolicyName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RoutingPolicyNameRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.RuleSetNames),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.RuleSetNamesRefs,
		Selector:      mg.Spec.ForProvider.RuleSetNamesSelector,
		To: reference.To{
			List:    &RuleSetList{},
			Managed: &RuleSet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RuleSetNames")
	}
	mg.Spec.ForProvider.RuleSetNames = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.RuleSetNamesRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this LoadBalancer.
func (mg *LoadBalancer) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SubnetIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SubnetIdsRefs,
		Selector:      mg.Spec.ForProvider.SubnetIdsSelector,
		To: reference.To{
			List:    &v1alpha11.SubnetList{},
			Managed: &v1alpha11.Subnet{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SubnetIds")
	}
	mg.Spec.ForProvider.SubnetIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SubnetIdsRefs = mrsp.ResolvedReferences

	return nil
}

// ResolveReferences of this PathRouteSet.
func (mg *PathRouteSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.PathRoutes); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PathRoutes[i3].BackendSetName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.PathRoutes[i3].BackendSetNameRef,
			Selector:     mg.Spec.ForProvider.PathRoutes[i3].BackendSetNameSelector,
			To: reference.To{
				List:    &BackendSetList{},
				Managed: &BackendSet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.PathRoutes[i3].BackendSetName")
		}
		mg.Spec.ForProvider.PathRoutes[i3].BackendSetName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.PathRoutes[i3].BackendSetNameRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this RoutingPolicy.
func (mg *RoutingPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Rules); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Rules[i3].Actions); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Rules[i3].Actions[i4].BackendSetName),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.Rules[i3].Actions[i4].BackendSetNameRef,
				Selector:     mg.Spec.ForProvider.Rules[i3].Actions[i4].BackendSetNameSelector,
				To: reference.To{
					List:    &BackendSetList{},
					Managed: &BackendSet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Rules[i3].Actions[i4].BackendSetName")
			}
			mg.Spec.ForProvider.Rules[i3].Actions[i4].BackendSetName = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Rules[i3].Actions[i4].BackendSetNameRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this RuleSet.
func (mg *RuleSet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SSLCipherSuite.
func (mg *SSLCipherSuite) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoadBalancerID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.LoadBalancerIDRef,
		Selector:     mg.Spec.ForProvider.LoadBalancerIDSelector,
		To: reference.To{
			List:    &LoadBalancerList{},
			Managed: &LoadBalancer{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.LoadBalancerID")
	}
	mg.Spec.ForProvider.LoadBalancerID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.LoadBalancerIDRef = rsp.ResolvedReference

	return nil
}
