/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionConfigurationObservation struct {
}

type ConnectionConfigurationParameters struct {

	// (Updatable) The backend TCP Proxy Protocol version.  Example: 1
	// +kubebuilder:validation:Optional
	BackendTCPProxyProtocolVersion *float64 `json:"backendTcpProxyProtocolVersion,omitempty" tf:"backend_tcp_proxy_protocol_version,omitempty"`

	// (Updatable) The maximum idle time, in seconds, allowed between two successive receive or two successive send operations between the client and backend servers. A send operation does not reset the timer for receive operations. A receive operation does not reset the timer for send operations.
	// +kubebuilder:validation:Required
	IdleTimeoutInSeconds *string `json:"idleTimeoutInSeconds" tf:"idle_timeout_in_seconds,omitempty"`
}

type ListenerObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ListenerParameters struct {

	// (Updatable) Configuration details for the connection between the client and backend servers.
	// +kubebuilder:validation:Optional
	ConnectionConfiguration []ConnectionConfigurationParameters `json:"connectionConfiguration,omitempty" tf:"connection_configuration,omitempty"`

	// (Updatable) The name of the associated backend set.  Example: example_backend_set
	// +crossplane:generate:reference:type=BackendSet
	// +kubebuilder:validation:Optional
	DefaultBackendSetName *string `json:"defaultBackendSetName,omitempty" tf:"default_backend_set_name,omitempty"`

	// Reference to a BackendSet to populate defaultBackendSetName.
	// +kubebuilder:validation:Optional
	DefaultBackendSetNameRef *v1.Reference `json:"defaultBackendSetNameRef,omitempty" tf:"-"`

	// Selector for a BackendSet to populate defaultBackendSetName.
	// +kubebuilder:validation:Optional
	DefaultBackendSetNameSelector *v1.Selector `json:"defaultBackendSetNameSelector,omitempty" tf:"-"`

	// (Updatable) An array of hostname resource names.
	// +crossplane:generate:reference:type=LBHostname
	// +kubebuilder:validation:Optional
	HostnameNames []*string `json:"hostnameNames,omitempty" tf:"hostname_names,omitempty"`

	// References to LBHostname to populate hostnameNames.
	// +kubebuilder:validation:Optional
	HostnameNamesRefs []v1.Reference `json:"hostnameNamesRefs,omitempty" tf:"-"`

	// Selector for a list of LBHostname to populate hostnameNames.
	// +kubebuilder:validation:Optional
	HostnameNamesSelector *v1.Selector `json:"hostnameNamesSelector,omitempty" tf:"-"`

	// The OCID of the load balancer on which to add a listener.
	// +crossplane:generate:reference:type=LoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a LoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// A friendly name for the listener. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_listener
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Updatable) Deprecated. Please use routingPolicies instead.
	// +crossplane:generate:reference:type=PathRouteSet
	// +kubebuilder:validation:Optional
	PathRouteSetName *string `json:"pathRouteSetName,omitempty" tf:"path_route_set_name,omitempty"`

	// Reference to a PathRouteSet to populate pathRouteSetName.
	// +kubebuilder:validation:Optional
	PathRouteSetNameRef *v1.Reference `json:"pathRouteSetNameRef,omitempty" tf:"-"`

	// Selector for a PathRouteSet to populate pathRouteSetName.
	// +kubebuilder:validation:Optional
	PathRouteSetNameSelector *v1.Selector `json:"pathRouteSetNameSelector,omitempty" tf:"-"`

	// (Updatable) The communication port for the listener.  Example: 80
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// (Updatable) The protocol on which the listener accepts connection requests. To get a list of valid protocols, use the ListProtocols operation.  Example: HTTP
	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// (Updatable) The name of the routing policy applied to this listener's traffic.  Example: example_routing_policy
	// +crossplane:generate:reference:type=RoutingPolicy
	// +kubebuilder:validation:Optional
	RoutingPolicyName *string `json:"routingPolicyName,omitempty" tf:"routing_policy_name,omitempty"`

	// Reference to a RoutingPolicy to populate routingPolicyName.
	// +kubebuilder:validation:Optional
	RoutingPolicyNameRef *v1.Reference `json:"routingPolicyNameRef,omitempty" tf:"-"`

	// Selector for a RoutingPolicy to populate routingPolicyName.
	// +kubebuilder:validation:Optional
	RoutingPolicyNameSelector *v1.Selector `json:"routingPolicyNameSelector,omitempty" tf:"-"`

	// (Updatable) The names of the rule sets to apply to the listener.  Example: ["example_rule_set"]
	// +crossplane:generate:reference:type=RuleSet
	// +kubebuilder:validation:Optional
	RuleSetNames []*string `json:"ruleSetNames,omitempty" tf:"rule_set_names,omitempty"`

	// References to RuleSet to populate ruleSetNames.
	// +kubebuilder:validation:Optional
	RuleSetNamesRefs []v1.Reference `json:"ruleSetNamesRefs,omitempty" tf:"-"`

	// Selector for a list of RuleSet to populate ruleSetNames.
	// +kubebuilder:validation:Optional
	RuleSetNamesSelector *v1.Selector `json:"ruleSetNamesSelector,omitempty" tf:"-"`

	// (Updatable) The load balancer's SSL handling configuration details.
	// +kubebuilder:validation:Optional
	SSLConfiguration []ListenerSSLConfigurationParameters `json:"sslConfiguration,omitempty" tf:"ssl_configuration,omitempty"`
}

type ListenerSSLConfigurationObservation struct {
}

type ListenerSSLConfigurationParameters struct {

	// (Updatable) Ids for Oracle Cloud Infrastructure certificates service certificates. Currently only a single Id may be passed.  Example: [ocid1.certificate.oc1.us-ashburn-1.amaaaaaaav3bgsaa5o2q7rh5nfmkkukfkogasqhk6af2opufhjlqg7m6jqzq]
	// +kubebuilder:validation:Optional
	CertificateIds []*string `json:"certificateIds,omitempty" tf:"certificate_ids,omitempty"`

	// (Updatable) A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: example_certificate_bundle
	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// (Updatable) The name of the cipher suite to use for HTTPS or SSL connections.
	// +kubebuilder:validation:Optional
	CipherSuiteName *string `json:"cipherSuiteName,omitempty" tf:"cipher_suite_name,omitempty"`

	// (Updatable) A list of SSL protocols the load balancer must support for HTTPS or SSL connections.
	// +kubebuilder:validation:Optional
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// (Updatable) When this attribute is set to ENABLED, the system gives preference to the server ciphers over the client ciphers.
	// +kubebuilder:validation:Optional
	ServerOrderPreference *string `json:"serverOrderPreference,omitempty" tf:"server_order_preference,omitempty"`

	// (Updatable) Ids for Oracle Cloud Infrastructure certificates service CA or CA bundles for the load balancer to trust.  Example: [ocid1.cabundle.oc1.us-ashburn-1.amaaaaaaav3bgsaagl4zzyqdop5i2vuwoqewdvauuw34llqa74otq2jdsfyq]
	// +kubebuilder:validation:Optional
	TrustedCertificateAuthorityIds []*string `json:"trustedCertificateAuthorityIds,omitempty" tf:"trusted_certificate_authority_ids,omitempty"`

	// (Updatable) The maximum depth for peer certificate chain verification.  Example: 3
	// +kubebuilder:validation:Optional
	VerifyDepth *float64 `json:"verifyDepth,omitempty" tf:"verify_depth,omitempty"`

	// (Updatable) Whether the load balancer listener should verify peer certificates.  Example: true
	// +kubebuilder:validation:Optional
	VerifyPeerCertificate *bool `json:"verifyPeerCertificate,omitempty" tf:"verify_peer_certificate,omitempty"`
}

// ListenerSpec defines the desired state of Listener
type ListenerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ListenerParameters `json:"forProvider"`
}

// ListenerStatus defines the observed state of Listener.
type ListenerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Listener is the Schema for the Listeners API. Provides the Listener resource in Oracle Cloud Infrastructure Load Balancer service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListenerSpec   `json:"spec"`
	Status            ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerList contains a list of Listeners
type ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Listener `json:"items"`
}

// Repository type metadata.
var (
	Listener_Kind             = "Listener"
	Listener_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Listener_Kind}.String()
	Listener_KindAPIVersion   = Listener_Kind + "." + CRDGroupVersion.String()
	Listener_GroupVersionKind = CRDGroupVersion.WithKind(Listener_Kind)
)

func init() {
	SchemeBuilder.Register(&Listener{}, &ListenerList{})
}
