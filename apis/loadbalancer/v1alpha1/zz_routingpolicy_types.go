/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsObservation struct {
}

type ActionsParameters struct {

	// (Updatable) Name of the backend set the listener will forward the traffic to.  Example: backendSetForImages
	// +crossplane:generate:reference:type=BackendSet
	// +kubebuilder:validation:Optional
	BackendSetName *string `json:"backendSetName,omitempty" tf:"backend_set_name,omitempty"`

	// Reference to a BackendSet to populate backendSetName.
	// +kubebuilder:validation:Optional
	BackendSetNameRef *v1.Reference `json:"backendSetNameRef,omitempty" tf:"-"`

	// Selector for a BackendSet to populate backendSetName.
	// +kubebuilder:validation:Optional
	BackendSetNameSelector *v1.Selector `json:"backendSetNameSelector,omitempty" tf:"-"`

	// The name for this list of routing rules. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_routing_rules
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type RoutingPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type RoutingPolicyParameters struct {

	// (Updatable) The version of the language in which condition of rules are composed.
	// +kubebuilder:validation:Required
	ConditionLanguageVersion *string `json:"conditionLanguageVersion" tf:"condition_language_version,omitempty"`

	// The OCID of the load balancer to add the routing policy rule list to.
	// +crossplane:generate:reference:type=LoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a LoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// The name for this list of routing rules. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_routing_rules
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Updatable) The list of routing rules.
	// +kubebuilder:validation:Required
	Rules []RulesParameters `json:"rules" tf:"rules,omitempty"`
}

type RulesObservation struct {
}

type RulesParameters struct {

	// (Updatable) A list of actions to be applied when conditions of the routing rule are met.
	// +kubebuilder:validation:Required
	Actions []ActionsParameters `json:"actions" tf:"actions,omitempty"`

	// (Updatable) A routing rule to evaluate defined conditions against the incoming HTTP request and perform an action.
	// +kubebuilder:validation:Required
	Condition *string `json:"condition" tf:"condition,omitempty"`

	// The name for this list of routing rules. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_routing_rules
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// RoutingPolicySpec defines the desired state of RoutingPolicy
type RoutingPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoutingPolicyParameters `json:"forProvider"`
}

// RoutingPolicyStatus defines the observed state of RoutingPolicy.
type RoutingPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoutingPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RoutingPolicy is the Schema for the RoutingPolicys API. Provides the Load Balancer Routing Policy resource in Oracle Cloud Infrastructure Load Balancer service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type RoutingPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RoutingPolicySpec   `json:"spec"`
	Status            RoutingPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoutingPolicyList contains a list of RoutingPolicys
type RoutingPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RoutingPolicy `json:"items"`
}

// Repository type metadata.
var (
	RoutingPolicy_Kind             = "RoutingPolicy"
	RoutingPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RoutingPolicy_Kind}.String()
	RoutingPolicy_KindAPIVersion   = RoutingPolicy_Kind + "." + CRDGroupVersion.String()
	RoutingPolicy_GroupVersionKind = CRDGroupVersion.WithKind(RoutingPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&RoutingPolicy{}, &RoutingPolicyList{})
}
