/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LBHostnameInitParameters struct {

	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see Managing Request Routing.  Example: app.example.com
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The OCID of the load balancer to add the hostname to.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/loadbalancer/v1alpha1.LoadBalancer
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a LoadBalancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_hostname_001
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type LBHostnameObservation struct {

	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see Managing Request Routing.  Example: app.example.com
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The OCID of the load balancer to add the hostname to.
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_hostname_001
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type LBHostnameParameters struct {

	// (Updatable) A virtual hostname. For more information about virtual hostname string construction, see Managing Request Routing.  Example: app.example.com
	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// The OCID of the load balancer to add the hostname to.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/loadbalancer/v1alpha1.LoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a LoadBalancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancer in loadbalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// A friendly name for the hostname resource. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_hostname_001
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

// LBHostnameSpec defines the desired state of LBHostname
type LBHostnameSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LBHostnameParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LBHostnameInitParameters `json:"initProvider,omitempty"`
}

// LBHostnameStatus defines the observed state of LBHostname.
type LBHostnameStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LBHostnameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// LBHostname is the Schema for the LBHostnames API. Provides the Hostname resource in Oracle Cloud Infrastructure Load Balancer service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type LBHostname struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.hostname) || (has(self.initProvider) && has(self.initProvider.hostname))",message="spec.forProvider.hostname is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   LBHostnameSpec   `json:"spec"`
	Status LBHostnameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LBHostnameList contains a list of LBHostnames
type LBHostnameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LBHostname `json:"items"`
}

// Repository type metadata.
var (
	LBHostname_Kind             = "LBHostname"
	LBHostname_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LBHostname_Kind}.String()
	LBHostname_KindAPIVersion   = LBHostname_Kind + "." + CRDGroupVersion.String()
	LBHostname_GroupVersionKind = CRDGroupVersion.WithKind(LBHostname_Kind)
)

func init() {
	SchemeBuilder.Register(&LBHostname{}, &LBHostnameList{})
}
