/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConditionsObservation struct {
}

type ConditionsParameters struct {

	// (Updatable) The attribute_name can be one of these values: PATH, SOURCE_IP_ADDRESS, SOURCE_VCN_ID, SOURCE_VCN_IP_ADDRESS
	// +kubebuilder:validation:Required
	AttributeName *string `json:"attributeName" tf:"attribute_name,omitempty"`

	// (Updatable) Depends on attribute_name:
	// +kubebuilder:validation:Required
	AttributeValue *string `json:"attributeValue" tf:"attribute_value,omitempty"`

	// (Updatable) A string that specifies how to compare the PathMatchCondition object's attributeValue string to the incoming URI.
	// +kubebuilder:validation:Optional
	Operator *string `json:"operator,omitempty" tf:"operator,omitempty"`
}

type ItemsObservation struct {
}

type ItemsParameters struct {

	// (Updatable) The action can be one of these values: ADD_HTTP_REQUEST_HEADER, ADD_HTTP_RESPONSE_HEADER, ALLOW, CONTROL_ACCESS_USING_HTTP_METHODS, EXTEND_HTTP_REQUEST_HEADER_VALUE, EXTEND_HTTP_RESPONSE_HEADER_VALUE, HTTP_HEADER, REDIRECT, REMOVE_HTTP_REQUEST_HEADER, REMOVE_HTTP_RESPONSE_HEADER
	// +kubebuilder:validation:Required
	Action *string `json:"action" tf:"action,omitempty"`

	// (Updatable) The list of HTTP methods allowed for this listener.
	// +kubebuilder:validation:Optional
	AllowedMethods []*string `json:"allowedMethods,omitempty" tf:"allowed_methods,omitempty"`

	// (Applicable when action=HTTP_HEADER) (Updatable) Indicates whether or not invalid characters in client header fields will be allowed. Valid names are composed of English letters, digits, hyphens and underscores. If "true", invalid characters are allowed in the HTTP header. If "false", invalid characters are not allowed in the HTTP header
	// +kubebuilder:validation:Optional
	AreInvalidCharactersAllowed *bool `json:"areInvalidCharactersAllowed,omitempty" tf:"are_invalid_characters_allowed,omitempty"`

	// (Updatable)
	// +kubebuilder:validation:Optional
	Conditions []ConditionsParameters `json:"conditions,omitempty" tf:"conditions,omitempty"`

	// (Applicable when action=ALLOW) (Updatable) A brief description of the access control rule. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// (Applicable when action=HTTP_HEADER) (Updatable) The maximum size of each buffer used for reading http client request header. This value indicates the maximum size allowed for each buffer. The allowed values for buffer size are 8, 16, 32 and 64.
	// +kubebuilder:validation:Optional
	HTTPLargeHeaderSizeInKb *float64 `json:"httpLargeHeaderSizeInKb,omitempty" tf:"http_large_header_size_in_kb,omitempty"`

	// (Updatable) A header name that conforms to RFC 7230.  Example: example_header_name
	// +kubebuilder:validation:Optional
	Header *string `json:"header,omitempty" tf:"header,omitempty"`

	// (Applicable when action=EXTEND_HTTP_REQUEST_HEADER_VALUE | EXTEND_HTTP_RESPONSE_HEADER_VALUE) (Updatable) A string to prepend to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
	// +kubebuilder:validation:Optional
	Prefix *string `json:"prefix,omitempty" tf:"prefix,omitempty"`

	// (Applicable when action=REDIRECT) (Updatable) An object that defines the redirect URI applied to the original request. The object property values compose the redirect URI.
	// +kubebuilder:validation:Optional
	RedirectURI []RedirectURIParameters `json:"redirectUri,omitempty" tf:"redirect_uri,omitempty"`

	// (Applicable when action=REDIRECT) (Updatable) The HTTP status code to return when the incoming request is redirected.
	// +kubebuilder:validation:Optional
	ResponseCode *float64 `json:"responseCode,omitempty" tf:"response_code,omitempty"`

	// (Applicable when action=CONTROL_ACCESS_USING_HTTP_METHODS) (Updatable) The HTTP status code to return when the requested HTTP method is not in the list of allowed methods. The associated status line returned with the code is mapped from the standard HTTP specification. The default value is 405 (Method Not Allowed).  Example: 403
	// +kubebuilder:validation:Optional
	StatusCode *float64 `json:"statusCode,omitempty" tf:"status_code,omitempty"`

	// (Applicable when action=EXTEND_HTTP_REQUEST_HEADER_VALUE | EXTEND_HTTP_RESPONSE_HEADER_VALUE) (Updatable) A string to append to the header value. The resulting header value must still conform to RFC 7230. With the following exceptions:
	// +kubebuilder:validation:Optional
	Suffix *string `json:"suffix,omitempty" tf:"suffix,omitempty"`

	// (Updatable) A header value that conforms to RFC 7230. With the following exceptions:
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type RedirectURIObservation struct {
}

type RedirectURIParameters struct {

	// (Applicable when action=REDIRECT) (Updatable) The valid domain name (hostname) or IP address to use in the redirect URI.
	// +kubebuilder:validation:Optional
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	// (Applicable when action=REDIRECT) (Updatable) The HTTP URI path to use in the redirect URI.
	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// (Applicable when action=REDIRECT) (Updatable) The communication port to use in the redirect URI.
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// (Applicable when action=REDIRECT) (Updatable) The HTTP protocol to use in the redirect URI.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// (Applicable when action=REDIRECT) (Updatable) The query string to use in the redirect URI.
	// +kubebuilder:validation:Optional
	Query *string `json:"query,omitempty" tf:"query,omitempty"`
}

type RuleSetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type RuleSetParameters struct {

	// (Updatable) An array of rules that compose the rule set. For more information, see Managing Rule Sets
	// +kubebuilder:validation:Required
	Items []ItemsParameters `json:"items" tf:"items,omitempty"`

	// The OCID of the specified load balancer.
	// +crossplane:generate:reference:type=LoadBalancer
	// +kubebuilder:validation:Optional
	LoadBalancerID *string `json:"loadBalancerId,omitempty" tf:"load_balancer_id,omitempty"`

	// Reference to a LoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDRef *v1.Reference `json:"loadBalancerIdRef,omitempty" tf:"-"`

	// Selector for a LoadBalancer to populate loadBalancerId.
	// +kubebuilder:validation:Optional
	LoadBalancerIDSelector *v1.Selector `json:"loadBalancerIdSelector,omitempty" tf:"-"`

	// The name for this set of rules. It must be unique and it cannot be changed. Avoid entering confidential information.  Example: example_rule_set
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// RuleSetSpec defines the desired state of RuleSet
type RuleSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RuleSetParameters `json:"forProvider"`
}

// RuleSetStatus defines the observed state of RuleSet.
type RuleSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RuleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RuleSet is the Schema for the RuleSets API. Provides the Rule Set resource in Oracle Cloud Infrastructure Load Balancer service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type RuleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RuleSetSpec   `json:"spec"`
	Status            RuleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RuleSetList contains a list of RuleSets
type RuleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RuleSet `json:"items"`
}

// Repository type metadata.
var (
	RuleSet_Kind             = "RuleSet"
	RuleSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RuleSet_Kind}.String()
	RuleSet_KindAPIVersion   = RuleSet_Kind + "." + CRDGroupVersion.String()
	RuleSet_GroupVersionKind = CRDGroupVersion.WithKind(RuleSet_Kind)
)

func init() {
	SchemeBuilder.Register(&RuleSet{}, &RuleSetList{})
}
