/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ErrorObservation struct {

	// A short error code that defines the upstream error, meant for programmatic parsing. See API Errors.
	Code *string `json:"code,omitempty" tf:"code,omitempty"`

	// A human-readable error string of the upstream error.
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// The status of the HTTP response encountered in the upstream error.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`
}

type ErrorParameters struct {
}

type InitialNodeLabelsObservation struct {
}

type InitialNodeLabelsParameters struct {

	// (Updatable) The key of the pair.
	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// (Updatable) The value of the pair.
	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodeConfigDetailsObservation struct {
}

type NodeConfigDetailsParameters struct {

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Whether to enable in-transit encryption for the data volume's paravirtualized attachment. This field applies to both block volumes and boot volumes. The default value is false.
	// +kubebuilder:validation:Optional
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// (Updatable) The OCID of the Key Management Service key assigned to the boot volume.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// (Updatable) The CNI related configuration of pods in the node pool.
	// +kubebuilder:validation:Optional
	NodePoolPodNetworkOptionDetails []NodePoolPodNetworkOptionDetailsParameters `json:"nodePoolPodNetworkOptionDetails,omitempty" tf:"node_pool_pod_network_option_details,omitempty"`

	// (Updatable) The OCIDs of the Network Security Group(s) to associate nodes for this node pool with. For more information about NSGs, see NetworkSecurityGroup.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.NetworkSecurityGroup
	// +kubebuilder:validation:Optional
	NsgIds []*string `json:"nsgIds,omitempty" tf:"nsg_ids,omitempty"`

	// References to NetworkSecurityGroup in core to populate nsgIds.
	// +kubebuilder:validation:Optional
	NsgIdsRefs []v1.Reference `json:"nsgIdsRefs,omitempty" tf:"-"`

	// Selector for a list of NetworkSecurityGroup in core to populate nsgIds.
	// +kubebuilder:validation:Optional
	NsgIdsSelector *v1.Selector `json:"nsgIdsSelector,omitempty" tf:"-"`

	// (Updatable) The placement configurations for the node pool. Provide one placement configuration for each availability domain in which you intend to launch a node.
	// +kubebuilder:validation:Required
	PlacementConfigs []PlacementConfigsParameters `json:"placementConfigs" tf:"placement_configs,omitempty"`

	// (Updatable) The number of nodes that should be in the node pool.
	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`
}

type NodeEvictionNodePoolSettingsObservation struct {
}

type NodeEvictionNodePoolSettingsParameters struct {

	// (Updatable) Duration after which OKE will give up eviction of the pods on the node. PT0M will indicate you want to delete the node without cordon and drain. Default PT60M, Min PT0M, Max: PT60M. Format ISO 8601 e.g PT30M
	// +kubebuilder:validation:Optional
	EvictionGraceDuration *string `json:"evictionGraceDuration,omitempty" tf:"eviction_grace_duration,omitempty"`

	// (Updatable) If the underlying compute instance should be deleted if you cannot evict all the pods in grace period
	// +kubebuilder:validation:Optional
	IsForceDeleteAfterGraceDuration *bool `json:"isForceDeleteAfterGraceDuration,omitempty" tf:"is_force_delete_after_grace_duration,omitempty"`
}

type NodePoolCyclingDetailsObservation struct {
}

type NodePoolCyclingDetailsParameters struct {

	// (Updatable) If nodes in the nodepool will be cycled to have new changes.
	// +kubebuilder:validation:Optional
	IsNodeCyclingEnabled *bool `json:"isNodeCyclingEnabled,omitempty" tf:"is_node_cycling_enabled,omitempty"`

	// (Updatable) Maximum additional new compute instances that would be temporarily created and added to nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 1, Ranges from 0 to Nodepool size or 0% to 100%
	// +kubebuilder:validation:Optional
	MaximumSurge *string `json:"maximumSurge,omitempty" tf:"maximum_surge,omitempty"`

	// (Updatable) Maximum active nodes that would be terminated from nodepool during the cycling nodepool process. OKE supports both integer and percentage input. Defaults to 0, Ranges from 0 to Nodepool size or 0% to 100%
	// +kubebuilder:validation:Optional
	MaximumUnavailable *string `json:"maximumUnavailable,omitempty" tf:"maximum_unavailable,omitempty"`
}

type NodePoolObservation struct {

	// The OCID of the node pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Details about the state of the nodepool.
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	// Deprecated. see nodeSourceDetails. Source running on the nodes in the node pool.
	NodeSource []NodeSourceObservation `json:"nodeSource,omitempty" tf:"node_source,omitempty"`

	// The nodes in the node pool.
	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// The state of the node.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type NodePoolParameters struct {

	// The OCID of the cluster to which this node pool is attached.
	// +crossplane:generate:reference:type=Cluster
	// +kubebuilder:validation:Optional
	ClusterID *string `json:"clusterId,omitempty" tf:"cluster_id,omitempty"`

	// Reference to a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDRef *v1.Reference `json:"clusterIdRef,omitempty" tf:"-"`

	// Selector for a Cluster to populate clusterId.
	// +kubebuilder:validation:Optional
	ClusterIDSelector *v1.Selector `json:"clusterIdSelector,omitempty" tf:"-"`

	// The OCID of the compartment in which the node pool exists.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
	// +kubebuilder:validation:Optional
	InitialNodeLabels []InitialNodeLabelsParameters `json:"initialNodeLabels,omitempty" tf:"initial_node_labels,omitempty"`

	// (Updatable) The version of Kubernetes to install on the nodes in the node pool.
	// +kubebuilder:validation:Optional
	KubernetesVersion *string `json:"kubernetesVersion,omitempty" tf:"kubernetes_version,omitempty"`

	// (Updatable) The name of the node pool. Avoid entering confidential information.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
	// +kubebuilder:validation:Optional
	NodeConfigDetails []NodeConfigDetailsParameters `json:"nodeConfigDetails,omitempty" tf:"node_config_details,omitempty"`

	// (Updatable) Node Eviction Details configuration
	// +kubebuilder:validation:Optional
	NodeEvictionNodePoolSettings []NodeEvictionNodePoolSettingsParameters `json:"nodeEvictionNodePoolSettings,omitempty" tf:"node_eviction_node_pool_settings,omitempty"`

	// Deprecated. see nodeSource. The OCID of the image running on the nodes in the node pool.
	// +kubebuilder:validation:Optional
	NodeImageID *string `json:"nodeImageId,omitempty" tf:"node_image_id,omitempty"`

	// Deprecated. Use nodeSourceDetails instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when node_image_id is specified.
	// +kubebuilder:validation:Optional
	NodeImageName *string `json:"nodeImageName,omitempty" tf:"node_image_name,omitempty"`

	// (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
	// +kubebuilder:validation:Optional
	NodeMetadata map[string]*string `json:"nodeMetadata,omitempty" tf:"node_metadata,omitempty"`

	// (Updatable) Node Pool Cycling Details
	// +kubebuilder:validation:Optional
	NodePoolCyclingDetails []NodePoolCyclingDetailsParameters `json:"nodePoolCyclingDetails,omitempty" tf:"node_pool_cycling_details,omitempty"`

	// (Updatable) The name of the node shape of the nodes in the node pool.
	// +kubebuilder:validation:Required
	NodeShape *string `json:"nodeShape" tf:"node_shape,omitempty"`

	// (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
	// +kubebuilder:validation:Optional
	NodeShapeConfig []NodeShapeConfigParameters `json:"nodeShapeConfig,omitempty" tf:"node_shape_config,omitempty"`

	// (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
	// +kubebuilder:validation:Optional
	NodeSourceDetails []NodeSourceDetailsParameters `json:"nodeSourceDetails,omitempty" tf:"node_source_details,omitempty"`

	// (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
	// +kubebuilder:validation:Optional
	QuantityPerSubnet *float64 `json:"quantityPerSubnet,omitempty" tf:"quantity_per_subnet,omitempty"`

	// (Updatable) The SSH public key on each node in the node pool on launch.
	// +kubebuilder:validation:Optional
	SSHPublicKey *string `json:"sshPublicKey,omitempty" tf:"ssh_public_key,omitempty"`

	// (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
	// +kubebuilder:validation:Optional
	SubnetIds []*string `json:"subnetIds,omitempty" tf:"subnet_ids,omitempty"`
}

type NodePoolPodNetworkOptionDetailsObservation struct {
}

type NodePoolPodNetworkOptionDetailsParameters struct {

	// (Updatable) The CNI plugin used by this node pool
	// +kubebuilder:validation:Required
	CniType *string `json:"cniType" tf:"cni_type,omitempty"`

	// (Applicable when cni_type=OCI_VCN_IP_NATIVE) (Updatable) The max number of pods per node in the node pool. This value will be limited by the number of VNICs attachable to the node pool shape
	// +kubebuilder:validation:Optional
	MaxPodsPerNode *float64 `json:"maxPodsPerNode,omitempty" tf:"max_pods_per_node,omitempty"`

	// (Applicable when cni_type=OCI_VCN_IP_NATIVE) (Updatable) The OCIDs of the Network Security Group(s) to associate pods for this node pool with. For more information about NSGs, see NetworkSecurityGroup.
	// +kubebuilder:validation:Optional
	PodNsgIds []*string `json:"podNsgIds,omitempty" tf:"pod_nsg_ids,omitempty"`

	// (Updatable) The OCIDs of the subnets in which to place pods for this node pool. This can be one of the node pool subnet IDs
	// +kubebuilder:validation:Optional
	PodSubnetIds []*string `json:"podSubnetIds,omitempty" tf:"pod_subnet_ids,omitempty"`
}

type NodeShapeConfigObservation struct {
}

type NodeShapeConfigParameters struct {

	// (Updatable) The total amount of memory available to each node, in gigabytes.
	// +kubebuilder:validation:Optional
	MemoryInGbs *float64 `json:"memoryInGbs,omitempty" tf:"memory_in_gbs,omitempty"`

	// (Updatable) The total number of OCPUs available to each node in the node pool. See here for details.
	// +kubebuilder:validation:Optional
	Ocpus *float64 `json:"ocpus,omitempty" tf:"ocpus,omitempty"`
}

type NodeSourceDetailsObservation struct {
}

type NodeSourceDetailsParameters struct {

	// (Updatable) The size of the boot volume in GBs. Minimum value is 50 GB. See here for max custom boot volume sizing and OS-specific requirements.
	// +kubebuilder:validation:Optional
	BootVolumeSizeInGbs *string `json:"bootVolumeSizeInGbs,omitempty" tf:"boot_volume_size_in_gbs,omitempty"`

	// (Updatable) The OCID of the image used to boot the node.
	// +kubebuilder:validation:Required
	ImageID *string `json:"imageId" tf:"image_id,omitempty"`

	// (Updatable) The source type for the node. Use IMAGE when specifying an OCID of an image.
	// +kubebuilder:validation:Required
	SourceType *string `json:"sourceType" tf:"source_type,omitempty"`
}

type NodeSourceObservation struct {

	// (Updatable) The OCID of the image used to boot the node.
	ImageID *string `json:"imageId,omitempty" tf:"image_id,omitempty"`

	// The user-friendly name of the entity corresponding to the OCID.
	SourceName *string `json:"sourceName,omitempty" tf:"source_name,omitempty"`

	// (Updatable) The source type for the node. Use IMAGE when specifying an OCID of an image.
	SourceType *string `json:"sourceType,omitempty" tf:"source_type,omitempty"`
}

type NodeSourceParameters struct {
}

type NodesObservation struct {

	// (Updatable) The availability domain in which to place nodes. Example: Uocm:PHX-AD-1
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// An error that may be associated with the node.
	Error []ErrorObservation `json:"error,omitempty" tf:"error,omitempty"`

	// The fault domain of this node.
	FaultDomain *string `json:"faultDomain,omitempty" tf:"fault_domain,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// The OCID of the node pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Updatable) The version of Kubernetes to install on the nodes in the node pool.
	KubernetesVersion *string `json:"kubernetesVersion,omitempty" tf:"kubernetes_version,omitempty"`

	// Details about the state of the nodepool.
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	// (Updatable) The name of the node pool. Avoid entering confidential information.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// The OCID of the node pool to which this node belongs.
	NodePoolID *string `json:"nodePoolId,omitempty" tf:"node_pool_id,omitempty"`

	// The private IP address of this node.
	PrivateIP *string `json:"privateIp,omitempty" tf:"private_ip,omitempty"`

	// The public IP address of this node.
	PublicIP *string `json:"publicIp,omitempty" tf:"public_ip,omitempty"`

	// The state of the node.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// (Updatable) The OCID of the subnet in which to place nodes.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`
}

type NodesParameters struct {
}

type PlacementConfigsObservation struct {
}

type PlacementConfigsParameters struct {

	// (Updatable) The availability domain in which to place nodes. Example: Uocm:PHX-AD-1
	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// (Updatable) The OCID of the compute capacity reservation in which to place the compute instance.
	// +kubebuilder:validation:Optional
	CapacityReservationID *string `json:"capacityReservationId,omitempty" tf:"capacity_reservation_id,omitempty"`

	// (Updatable) A list of fault domains in which to place nodes.
	// +kubebuilder:validation:Optional
	FaultDomains []*string `json:"faultDomains,omitempty" tf:"fault_domains,omitempty"`

	// (Updatable) Configuration options for preemptible nodes.
	// +kubebuilder:validation:Optional
	PreemptibleNodeConfig []PreemptibleNodeConfigParameters `json:"preemptibleNodeConfig,omitempty" tf:"preemptible_node_config,omitempty"`

	// (Updatable) The OCID of the subnet in which to place nodes.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type PreemptibleNodeConfigObservation struct {
}

type PreemptibleNodeConfigParameters struct {

	// (Updatable) The action to run when the preemptible node is interrupted for eviction.
	// +kubebuilder:validation:Required
	PreemptionAction []PreemptionActionParameters `json:"preemptionAction" tf:"preemption_action,omitempty"`
}

type PreemptionActionObservation struct {
}

type PreemptionActionParameters struct {

	// (Updatable) Whether to preserve the boot volume that was used to launch the preemptible instance when the instance is terminated. Defaults to false if not specified.
	// +kubebuilder:validation:Optional
	IsPreserveBootVolume *bool `json:"isPreserveBootVolume,omitempty" tf:"is_preserve_boot_volume,omitempty"`

	// (Updatable) The type of action to run when the instance is interrupted for eviction.
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// NodePoolSpec defines the desired state of NodePool
type NodePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodePoolParameters `json:"forProvider"`
}

// NodePoolStatus defines the observed state of NodePool.
type NodePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NodePool is the Schema for the NodePools API. Provides the Node Pool resource in Oracle Cloud Infrastructure Container Engine service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type NodePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NodePoolSpec   `json:"spec"`
	Status            NodePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodePoolList contains a list of NodePools
type NodePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodePool `json:"items"`
}

// Repository type metadata.
var (
	NodePool_Kind             = "NodePool"
	NodePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodePool_Kind}.String()
	NodePool_KindAPIVersion   = NodePool_Kind + "." + CRDGroupVersion.String()
	NodePool_GroupVersionKind = CRDGroupVersion.WithKind(NodePool_Kind)
)

func init() {
	SchemeBuilder.Register(&NodePool{}, &NodePoolList{})
}
