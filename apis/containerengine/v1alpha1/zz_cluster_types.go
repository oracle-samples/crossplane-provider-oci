/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddOnsObservation struct {
}

type AddOnsParameters struct {

	// Whether or not to enable the Kubernetes Dashboard add-on.
	// +kubebuilder:validation:Optional
	IsKubernetesDashboardEnabled *bool `json:"isKubernetesDashboardEnabled,omitempty" tf:"is_kubernetes_dashboard_enabled,omitempty"`

	// Whether or not to enable the Tiller add-on.
	// +kubebuilder:validation:Optional
	IsTillerEnabled *bool `json:"isTillerEnabled,omitempty" tf:"is_tiller_enabled,omitempty"`
}

type AdmissionControllerOptionsObservation struct {
}

type AdmissionControllerOptionsParameters struct {

	// (Updatable) Whether or not to enable the Pod Security Policy admission controller.
	// +kubebuilder:validation:Optional
	IsPodSecurityPolicyEnabled *bool `json:"isPodSecurityPolicyEnabled,omitempty" tf:"is_pod_security_policy_enabled,omitempty"`
}

type ClusterObservation struct {

	// Available Kubernetes versions to which the clusters masters may be upgraded.
	AvailableKubernetesUpgrades []*string `json:"availableKubernetesUpgrades,omitempty" tf:"available_kubernetes_upgrades,omitempty"`

	// Endpoints served up by the cluster masters.
	Endpoints []EndpointsObservation `json:"endpoints,omitempty" tf:"endpoints,omitempty"`

	// The OCID of the cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Details about the state of the cluster masters.
	LifecycleDetails *string `json:"lifecycleDetails,omitempty" tf:"lifecycle_details,omitempty"`

	// Metadata about the cluster.
	Metadata []MetadataObservation `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// The state of the cluster masters.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ClusterParameters struct {

	// Available CNIs and network options for existing and new node pools of the cluster
	// +kubebuilder:validation:Optional
	ClusterPodNetworkOptions []ClusterPodNetworkOptionsParameters `json:"clusterPodNetworkOptions,omitempty" tf:"cluster_pod_network_options,omitempty"`

	// The OCID of the compartment in which to create the cluster.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// The network configuration for access to the Cluster control plane.
	// +kubebuilder:validation:Optional
	EndpointConfig []EndpointConfigParameters `json:"endpointConfig,omitempty" tf:"endpoint_config,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) The image verification policy for signature validation. Once a policy is created and enabled with one or more kms keys, the policy will ensure all images deployed has been signed with the key(s) attached to the policy.
	// +kubebuilder:validation:Optional
	ImagePolicyConfig []ImagePolicyConfigParameters `json:"imagePolicyConfig,omitempty" tf:"image_policy_config,omitempty"`

	// (Updatable) The OCIDs of the KMS key that will be used to verify whether the images are signed by an approved source.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`

	// (Updatable) The version of Kubernetes to install into the cluster masters.
	// +kubebuilder:validation:Required
	KubernetesVersion *string `json:"kubernetesVersion" tf:"kubernetes_version,omitempty"`

	// (Updatable) The name of the cluster. Avoid entering confidential information.
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// (Updatable) Optional attributes for the cluster.
	// +kubebuilder:validation:Optional
	Options []OptionsParameters `json:"options,omitempty" tf:"options,omitempty"`

	// (Updatable) Type of cluster
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// The OCID of the virtual cloud network (VCN) in which to create the cluster.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.Vcn
	// +kubebuilder:validation:Optional
	VcnID *string `json:"vcnId,omitempty" tf:"vcn_id,omitempty"`

	// Reference to a Vcn in core to populate vcnId.
	// +kubebuilder:validation:Optional
	VcnIDRef *v1.Reference `json:"vcnIdRef,omitempty" tf:"-"`

	// Selector for a Vcn in core to populate vcnId.
	// +kubebuilder:validation:Optional
	VcnIDSelector *v1.Selector `json:"vcnIdSelector,omitempty" tf:"-"`
}

type ClusterPodNetworkOptionsObservation struct {
}

type ClusterPodNetworkOptionsParameters struct {

	// The CNI used by the node pools of this cluster
	// +kubebuilder:validation:Required
	CniType *string `json:"cniType" tf:"cni_type,omitempty"`
}

type EndpointConfigObservation struct {
}

type EndpointConfigParameters struct {

	// Whether the cluster should be assigned a public IP address. Defaults to false. If set to true on a private subnet, the cluster provisioning will fail.
	// +kubebuilder:validation:Optional
	IsPublicIPEnabled *bool `json:"isPublicIpEnabled,omitempty" tf:"is_public_ip_enabled,omitempty"`

	// A list of the OCIDs of the network security groups (NSGs) to apply to the cluster endpoint. For more information about NSGs, see NetworkSecurityGroup.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.NetworkSecurityGroup
	// +kubebuilder:validation:Optional
	NsgIds []*string `json:"nsgIds,omitempty" tf:"nsg_ids,omitempty"`

	// References to NetworkSecurityGroup in core to populate nsgIds.
	// +kubebuilder:validation:Optional
	NsgIdsRefs []v1.Reference `json:"nsgIdsRefs,omitempty" tf:"-"`

	// Selector for a list of NetworkSecurityGroup in core to populate nsgIds.
	// +kubebuilder:validation:Optional
	NsgIdsSelector *v1.Selector `json:"nsgIdsSelector,omitempty" tf:"-"`

	// The OCID of the regional subnet in which to place the Cluster endpoint.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.Subnet
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// Reference to a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDRef *v1.Reference `json:"subnetIdRef,omitempty" tf:"-"`

	// Selector for a Subnet in core to populate subnetId.
	// +kubebuilder:validation:Optional
	SubnetIDSelector *v1.Selector `json:"subnetIdSelector,omitempty" tf:"-"`
}

type EndpointsObservation struct {

	// The non-native networking Kubernetes API server endpoint.
	Kubernetes *string `json:"kubernetes,omitempty" tf:"kubernetes,omitempty"`

	// The private native networking Kubernetes API server endpoint.
	PrivateEndpoint *string `json:"privateEndpoint,omitempty" tf:"private_endpoint,omitempty"`

	// The public native networking Kubernetes API server endpoint, if one was requested.
	PublicEndpoint *string `json:"publicEndpoint,omitempty" tf:"public_endpoint,omitempty"`

	// The FQDN assigned to the Kubernetes API private endpoint. Example: 'https://yourVcnHostnameEndpoint'
	VcnHostnameEndpoint *string `json:"vcnHostnameEndpoint,omitempty" tf:"vcn_hostname_endpoint,omitempty"`
}

type EndpointsParameters struct {
}

type ImagePolicyConfigObservation struct {
}

type ImagePolicyConfigParameters struct {

	// (Updatable) Whether the image verification policy is enabled. Defaults to false. If set to true, the images will be verified against the policy at runtime.
	// +kubebuilder:validation:Optional
	IsPolicyEnabled *bool `json:"isPolicyEnabled,omitempty" tf:"is_policy_enabled,omitempty"`

	// (Updatable) A list of KMS key details.
	// +kubebuilder:validation:Optional
	KeyDetails []KeyDetailsParameters `json:"keyDetails,omitempty" tf:"key_details,omitempty"`
}

type KeyDetailsObservation struct {
}

type KeyDetailsParameters struct {

	// (Updatable) The OCIDs of the KMS key that will be used to verify whether the images are signed by an approved source.
	// +kubebuilder:validation:Optional
	KMSKeyID *string `json:"kmsKeyId,omitempty" tf:"kms_key_id,omitempty"`
}

type KubernetesNetworkConfigObservation struct {
}

type KubernetesNetworkConfigParameters struct {

	// The CIDR block for Kubernetes pods. Optional, defaults to 10.244.0.0/16.
	// +kubebuilder:validation:Optional
	PodsCidr *string `json:"podsCidr,omitempty" tf:"pods_cidr,omitempty"`

	// The CIDR block for Kubernetes services. Optional, defaults to 10.96.0.0/16.
	// +kubebuilder:validation:Optional
	ServicesCidr *string `json:"servicesCidr,omitempty" tf:"services_cidr,omitempty"`
}

type MetadataObservation struct {

	// The user who created the cluster.
	CreatedByUserID *string `json:"createdByUserId,omitempty" tf:"created_by_user_id,omitempty"`

	// The OCID of the work request which created the cluster.
	CreatedByWorkRequestID *string `json:"createdByWorkRequestId,omitempty" tf:"created_by_work_request_id,omitempty"`

	// The user who deleted the cluster.
	DeletedByUserID *string `json:"deletedByUserId,omitempty" tf:"deleted_by_user_id,omitempty"`

	// The OCID of the work request which deleted the cluster.
	DeletedByWorkRequestID *string `json:"deletedByWorkRequestId,omitempty" tf:"deleted_by_work_request_id,omitempty"`

	// The time the cluster was created.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// The time the cluster was deleted.
	TimeDeleted *string `json:"timeDeleted,omitempty" tf:"time_deleted,omitempty"`

	// The time the cluster was updated.
	TimeUpdated *string `json:"timeUpdated,omitempty" tf:"time_updated,omitempty"`

	// The user who updated the cluster.
	UpdatedByUserID *string `json:"updatedByUserId,omitempty" tf:"updated_by_user_id,omitempty"`

	// The OCID of the work request which updated the cluster.
	UpdatedByWorkRequestID *string `json:"updatedByWorkRequestId,omitempty" tf:"updated_by_work_request_id,omitempty"`
}

type MetadataParameters struct {
}

type OptionsObservation struct {
}

type OptionsParameters struct {

	// Configurable cluster add-ons
	// +kubebuilder:validation:Optional
	AddOns []AddOnsParameters `json:"addOns,omitempty" tf:"add_ons,omitempty"`

	// (Updatable) Configurable cluster admission controllers
	// +kubebuilder:validation:Optional
	AdmissionControllerOptions []AdmissionControllerOptionsParameters `json:"admissionControllerOptions,omitempty" tf:"admission_controller_options,omitempty"`

	// Network configuration for Kubernetes.
	// +kubebuilder:validation:Optional
	KubernetesNetworkConfig []KubernetesNetworkConfigParameters `json:"kubernetesNetworkConfig,omitempty" tf:"kubernetes_network_config,omitempty"`

	// (Updatable) Configuration to be applied to block volumes created by Kubernetes Persistent Volume Claims (PVC)
	// +kubebuilder:validation:Optional
	PersistentVolumeConfig []PersistentVolumeConfigParameters `json:"persistentVolumeConfig,omitempty" tf:"persistent_volume_config,omitempty"`

	// (Updatable) Configuration to be applied to load balancers created by Kubernetes services
	// +kubebuilder:validation:Optional
	ServiceLBConfig []ServiceLBConfigParameters `json:"serviceLbConfig,omitempty" tf:"service_lb_config,omitempty"`

	// Selector for a list of Subnet in core to populate serviceLbSubnetIds.
	// +kubebuilder:validation:Optional
	ServiceLBSubnetIDSelector *v1.Selector `json:"serviceLbSubnetIdSelector,omitempty" tf:"-"`

	// The OCIDs of the subnets used for Kubernetes services load balancers.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/core/v1alpha1.Subnet
	// +crossplane:generate:reference:refFieldName=ServiceLBSubnetIdsRef
	// +crossplane:generate:reference:selectorFieldName=ServiceLBSubnetIDSelector
	// +kubebuilder:validation:Optional
	ServiceLBSubnetIds []*string `json:"serviceLbSubnetIds,omitempty" tf:"service_lb_subnet_ids,omitempty"`

	// References to Subnet in core to populate serviceLbSubnetIds.
	// +kubebuilder:validation:Optional
	ServiceLBSubnetIdsRef []v1.Reference `json:"serviceLbSubnetIdsRef,omitempty" tf:"-"`
}

type PersistentVolumeConfigObservation struct {
}

type PersistentVolumeConfigParameters struct {

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`
}

type ServiceLBConfigObservation struct {
}

type ServiceLBConfigParameters struct {

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags. Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags. Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API. Provides the Cluster resource in Oracle Cloud Infrastructure Container Engine service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
