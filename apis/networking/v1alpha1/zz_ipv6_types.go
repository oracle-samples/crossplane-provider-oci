/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Ipv6InitParameters struct {

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// An IPv6 address of your choice. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns an IPv6 address from the subnet. The subnet is the one that contains the VNIC you specify in vnicId.  Example: 2001:DB8::
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The IPv6 prefix allocated to the subnet. This is required if more than one IPv6 prefix exists on the subnet.
	Ipv6SubnetCidr *string `json:"ipv6subnetCidr,omitempty" tf:"ipv6subnet_cidr,omitempty"`

	// (Updatable) Lifetime of the IP address. There are two types of IPv6 IPs:
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// (Updatable) The OCID of the route table the IP address or VNIC will use. For more information, see Source Based Routing.
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// The OCID of the subnet from which the IPv6 is to be drawn. The IP address, if supplied, must be valid for the given subnet, only valid for reserved IPs currently.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// (Updatable) The OCID of the VNIC to assign the IPv6 to. The IPv6 will be in the VNIC's subnet.
	VnicID *string `json:"vnicId,omitempty" tf:"vnic_id,omitempty"`
}

type Ipv6Observation struct {

	// The OCID of the compartment containing the IPv6. This is the same as the VNIC's compartment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// The OCID of the IPv6.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// An IPv6 address of your choice. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns an IPv6 address from the subnet. The subnet is the one that contains the VNIC you specify in vnicId.  Example: 2001:DB8::
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// State of the IP address. If an IP address is assigned to a VNIC it is ASSIGNED, otherwise it is AVAILABLE.
	IPState *string `json:"ipState,omitempty" tf:"ip_state,omitempty"`

	// The IPv6 prefix allocated to the subnet. This is required if more than one IPv6 prefix exists on the subnet.
	Ipv6SubnetCidr *string `json:"ipv6subnetCidr,omitempty" tf:"ipv6subnet_cidr,omitempty"`

	// (Updatable) Lifetime of the IP address. There are two types of IPv6 IPs:
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// (Updatable) The OCID of the route table the IP address or VNIC will use. For more information, see Source Based Routing.
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// The IPv6's current state.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The OCID of the subnet from which the IPv6 is to be drawn. The IP address, if supplied, must be valid for the given subnet, only valid for reserved IPs currently.
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// The date and time the IPv6 was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// (Updatable) The OCID of the VNIC to assign the IPv6 to. The IPv6 will be in the VNIC's subnet.
	VnicID *string `json:"vnicId,omitempty" tf:"vnic_id,omitempty"`
}

type Ipv6Parameters struct {

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// An IPv6 address of your choice. Must be an available IP address within the subnet's CIDR. If you don't specify a value, Oracle automatically assigns an IPv6 address from the subnet. The subnet is the one that contains the VNIC you specify in vnicId.  Example: 2001:DB8::
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// The IPv6 prefix allocated to the subnet. This is required if more than one IPv6 prefix exists on the subnet.
	// +kubebuilder:validation:Optional
	Ipv6SubnetCidr *string `json:"ipv6subnetCidr,omitempty" tf:"ipv6subnet_cidr,omitempty"`

	// (Updatable) Lifetime of the IP address. There are two types of IPv6 IPs:
	// +kubebuilder:validation:Optional
	Lifetime *string `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// (Updatable) The OCID of the route table the IP address or VNIC will use. For more information, see Source Based Routing.
	// +kubebuilder:validation:Optional
	RouteTableID *string `json:"routeTableId,omitempty" tf:"route_table_id,omitempty"`

	// The OCID of the subnet from which the IPv6 is to be drawn. The IP address, if supplied, must be valid for the given subnet, only valid for reserved IPs currently.
	// +kubebuilder:validation:Optional
	SubnetID *string `json:"subnetId,omitempty" tf:"subnet_id,omitempty"`

	// (Updatable) The OCID of the VNIC to assign the IPv6 to. The IPv6 will be in the VNIC's subnet.
	// +kubebuilder:validation:Optional
	VnicID *string `json:"vnicId,omitempty" tf:"vnic_id,omitempty"`
}

// Ipv6Spec defines the desired state of Ipv6
type Ipv6Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Ipv6Parameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider Ipv6InitParameters `json:"initProvider,omitempty"`
}

// Ipv6Status defines the observed state of Ipv6.
type Ipv6Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Ipv6Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Ipv6 is the Schema for the Ipv6s API. Provides the Ipv6 resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type Ipv6 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              Ipv6Spec   `json:"spec"`
	Status            Ipv6Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Ipv6List contains a list of Ipv6s
type Ipv6List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Ipv6 `json:"items"`
}

// Repository type metadata.
var (
	Ipv6_Kind             = "Ipv6"
	Ipv6_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Ipv6_Kind}.String()
	Ipv6_KindAPIVersion   = Ipv6_Kind + "." + CRDGroupVersion.String()
	Ipv6_GroupVersionKind = CRDGroupVersion.WithKind(Ipv6_Kind)
)

func init() {
	SchemeBuilder.Register(&Ipv6{}, &Ipv6List{})
}
