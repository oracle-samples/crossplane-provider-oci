/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Rule.
	apisresolver "github.com/oracle/provider-oci/internal/apis"
)

func (mg *Rule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	for i3 := 0; i3 < len(mg.Spec.ForProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Actions[i3].Actions); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("functions.oci.upbound.io", "v1alpha1", "Function", "FunctionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionIDRef,
					Selector:     mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionID")
			}
			mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Actions[i3].Actions[i4].FunctionIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Actions[i3].Actions); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("streaming.oci.upbound.io", "v1alpha1", "Stream", "StreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamIDRef,
					Selector:     mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamID")
			}
			mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Actions[i3].Actions[i4].StreamIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.Actions[i3].Actions); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ons.oci.upbound.io", "v1alpha1", "NotificationTopic", "NotificationTopicList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicIDRef,
					Selector:     mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicID")
			}
			mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.Actions[i3].Actions[i4].TopicIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CompartmentIDRef,
			Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Actions[i3].Actions); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("functions.oci.upbound.io", "v1alpha1", "Function", "FunctionList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionIDRef,
					Selector:     mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionID")
			}
			mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Actions[i3].Actions[i4].FunctionIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Actions[i3].Actions); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("streaming.oci.upbound.io", "v1alpha1", "Stream", "StreamList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamIDRef,
					Selector:     mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamID")
			}
			mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Actions[i3].Actions[i4].StreamIDRef = rsp.ResolvedReference

		}
	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.Actions); i3++ {
		for i4 := 0; i4 < len(mg.Spec.InitProvider.Actions[i3].Actions); i4++ {
			{
				m, l, err = apisresolver.GetManagedResource("ons.oci.upbound.io", "v1alpha1", "NotificationTopic", "NotificationTopicList")
				if err != nil {
					return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
				}
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicIDRef,
					Selector:     mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicIDSelector,
					To:           reference.To{List: l, Managed: m},
				})
			}
			if err != nil {
				return errors.Wrap(err, "mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicID")
			}
			mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.InitProvider.Actions[i3].Actions[i4].TopicIDRef = rsp.ResolvedReference

		}
	}
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CompartmentIDRef,
			Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}
