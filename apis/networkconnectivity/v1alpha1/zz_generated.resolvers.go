/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.
// Code transformed by upjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"

	xpresource "github.com/crossplane/crossplane-runtime/pkg/resource"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"

	// ResolveReferences of this Cpe.
	apisresolver "github.com/oracle/provider-oci/internal/apis"
)

func (mg *Cpe) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CompartmentIDRef,
			Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CompartmentIDRef,
			Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Drg.
func (mg *Drg) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CompartmentIDRef,
			Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CompartmentIDRef,
			Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgAttachment.
func (mg *DrgAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgIDRef,
			Selector:     mg.Spec.ForProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteTable", "DrgRouteTableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteTableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgRouteTableIDRef,
			Selector:     mg.Spec.ForProvider.DrgRouteTableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteTableID")
	}
	mg.Spec.ForProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteTableIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Vcn", "VcnList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkDetails[i3].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkDetails[i3].IDRef,
				Selector:     mg.Spec.ForProvider.NetworkDetails[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkDetails[i3].ID")
		}
		mg.Spec.ForProvider.NetworkDetails[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkDetails[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "RouteTable", "RouteTableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkDetails[i3].RouteTableID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.NetworkDetails[i3].RouteTableIDRef,
				Selector:     mg.Spec.ForProvider.NetworkDetails[i3].RouteTableIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkDetails[i3].RouteTableID")
		}
		mg.Spec.ForProvider.NetworkDetails[i3].RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkDetails[i3].RouteTableIDRef = rsp.ResolvedReference

	}
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgIDRef,
			Selector:     mg.Spec.InitProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgID")
	}
	mg.Spec.InitProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteTable", "DrgRouteTableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgRouteTableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgRouteTableIDRef,
			Selector:     mg.Spec.InitProvider.DrgRouteTableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgRouteTableID")
	}
	mg.Spec.InitProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgRouteTableIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Vcn", "VcnList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkDetails[i3].ID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkDetails[i3].IDRef,
				Selector:     mg.Spec.InitProvider.NetworkDetails[i3].IDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkDetails[i3].ID")
		}
		mg.Spec.InitProvider.NetworkDetails[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkDetails[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.InitProvider.NetworkDetails); i3++ {
		{
			m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "RouteTable", "RouteTableList")
			if err != nil {
				return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
			}
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkDetails[i3].RouteTableID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.InitProvider.NetworkDetails[i3].RouteTableIDRef,
				Selector:     mg.Spec.InitProvider.NetworkDetails[i3].RouteTableIDSelector,
				To:           reference.To{List: l, Managed: m},
			})
		}
		if err != nil {
			return errors.Wrap(err, "mg.Spec.InitProvider.NetworkDetails[i3].RouteTableID")
		}
		mg.Spec.InitProvider.NetworkDetails[i3].RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.InitProvider.NetworkDetails[i3].RouteTableIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DrgAttachmentManagement.
func (mg *DrgAttachmentManagement) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CompartmentIDRef,
			Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgIDRef,
			Selector:     mg.Spec.ForProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteTable", "DrgRouteTableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteTableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgRouteTableIDRef,
			Selector:     mg.Spec.ForProvider.DrgRouteTableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteTableID")
	}
	mg.Spec.ForProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteTableIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Vcn", "VcnList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkIDRef,
			Selector:     mg.Spec.ForProvider.NetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CompartmentIDRef,
			Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgIDRef,
			Selector:     mg.Spec.InitProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgID")
	}
	mg.Spec.InitProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteTable", "DrgRouteTableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgRouteTableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgRouteTableIDRef,
			Selector:     mg.Spec.InitProvider.DrgRouteTableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgRouteTableID")
	}
	mg.Spec.InitProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgRouteTableIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Vcn", "VcnList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NetworkID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NetworkIDRef,
			Selector:     mg.Spec.InitProvider.NetworkIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NetworkID")
	}
	mg.Spec.InitProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgAttachmentsList.
func (mg *DrgAttachmentsList) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgIDRef,
			Selector:     mg.Spec.ForProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgIDRef,
			Selector:     mg.Spec.InitProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgID")
	}
	mg.Spec.InitProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteDistribution.
func (mg *DrgRouteDistribution) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgIDRef,
			Selector:     mg.Spec.ForProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgIDRef,
			Selector:     mg.Spec.InitProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgID")
	}
	mg.Spec.InitProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteDistributionStatement.
func (mg *DrgRouteDistributionStatement) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteDistribution", "DrgRouteDistributionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteDistributionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgRouteDistributionIDRef,
			Selector:     mg.Spec.ForProvider.DrgRouteDistributionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteDistributionID")
	}
	mg.Spec.ForProvider.DrgRouteDistributionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteDistributionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteDistribution", "DrgRouteDistributionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgRouteDistributionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgRouteDistributionIDRef,
			Selector:     mg.Spec.InitProvider.DrgRouteDistributionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgRouteDistributionID")
	}
	mg.Spec.InitProvider.DrgRouteDistributionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgRouteDistributionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteTable.
func (mg *DrgRouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgIDRef,
			Selector:     mg.Spec.ForProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteDistribution", "DrgRouteDistributionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ImportDrgRouteDistributionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.ImportDrgRouteDistributionIDRef,
			Selector:     mg.Spec.ForProvider.ImportDrgRouteDistributionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ImportDrgRouteDistributionID")
	}
	mg.Spec.ForProvider.ImportDrgRouteDistributionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ImportDrgRouteDistributionIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgIDRef,
			Selector:     mg.Spec.InitProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgID")
	}
	mg.Spec.InitProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteDistribution", "DrgRouteDistributionList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.ImportDrgRouteDistributionID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.ImportDrgRouteDistributionIDRef,
			Selector:     mg.Spec.InitProvider.ImportDrgRouteDistributionIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.ImportDrgRouteDistributionID")
	}
	mg.Spec.InitProvider.ImportDrgRouteDistributionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.ImportDrgRouteDistributionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteTableRouteRule.
func (mg *DrgRouteTableRouteRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteTable", "DrgRouteTableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteTableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgRouteTableIDRef,
			Selector:     mg.Spec.ForProvider.DrgRouteTableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteTableID")
	}
	mg.Spec.ForProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteTableIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgAttachment", "DrgAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NextHopDrgAttachmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NextHopDrgAttachmentIDRef,
			Selector:     mg.Spec.ForProvider.NextHopDrgAttachmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NextHopDrgAttachmentID")
	}
	mg.Spec.ForProvider.NextHopDrgAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NextHopDrgAttachmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgRouteTable", "DrgRouteTableList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgRouteTableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgRouteTableIDRef,
			Selector:     mg.Spec.InitProvider.DrgRouteTableIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgRouteTableID")
	}
	mg.Spec.InitProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgRouteTableIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "DrgAttachment", "DrgAttachmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.NextHopDrgAttachmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.NextHopDrgAttachmentIDRef,
			Selector:     mg.Spec.InitProvider.NextHopDrgAttachmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.NextHopDrgAttachmentID")
	}
	mg.Spec.InitProvider.NextHopDrgAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.NextHopDrgAttachmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Ipsec.
func (mg *Ipsec) ResolveReferences(ctx context.Context, c client.Reader) error {
	var m xpresource.Managed
	var l xpresource.ManagedList
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CompartmentIDRef,
			Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Cpe", "CpeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CpeID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CpeIDRef,
			Selector:     mg.Spec.ForProvider.CpeIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CpeID")
	}
	mg.Spec.ForProvider.CpeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CpeIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.DrgIDRef,
			Selector:     mg.Spec.ForProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("identity.oci.upbound.io", "v1alpha1", "Compartment", "CompartmentList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CompartmentID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CompartmentIDRef,
			Selector:     mg.Spec.InitProvider.CompartmentIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CompartmentID")
	}
	mg.Spec.InitProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CompartmentIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Cpe", "CpeList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.CpeID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.CpeIDRef,
			Selector:     mg.Spec.InitProvider.CpeIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.CpeID")
	}
	mg.Spec.InitProvider.CpeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.CpeIDRef = rsp.ResolvedReference
	{
		m, l, err = apisresolver.GetManagedResource("networkconnectivity.oci.upbound.io", "v1alpha1", "Drg", "DrgList")
		if err != nil {
			return errors.Wrap(err, "failed to get the reference target managed resource and its list for reference resolution")
		}

		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.InitProvider.DrgID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.InitProvider.DrgIDRef,
			Selector:     mg.Spec.InitProvider.DrgIDSelector,
			To:           reference.To{List: l, Managed: m},
		})
	}
	if err != nil {
		return errors.Wrap(err, "mg.Spec.InitProvider.DrgID")
	}
	mg.Spec.InitProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.InitProvider.DrgIDRef = rsp.ResolvedReference

	return nil
}
