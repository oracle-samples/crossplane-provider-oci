/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CrossConnectInitParameters struct {

	// (Updatable) The OCID of the compartment to contain the cross-connect.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The OCID of the cross-connect group to put this cross-connect in.
	CrossConnectGroupID *string `json:"crossConnectGroupId,omitempty" tf:"cross_connect_group_id,omitempty"`

	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	CustomerReferenceName *string `json:"customerReferenceName,omitempty" tf:"customer_reference_name,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	FarCrossConnectOrCrossConnectGroupID *string `json:"farCrossConnectOrCrossConnectGroupId,omitempty" tf:"far_cross_connect_or_cross_connect_group_id,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`

	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see ListCrossConnectLocations.  Example: CyrusOne, Chandler, AZ
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// (Updatable) Properties used to configure MACsec (if capable).
	MacsecProperties []MacsecPropertiesInitParameters `json:"macsecProperties,omitempty" tf:"macsec_properties,omitempty"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	NearCrossConnectOrCrossConnectGroupID *string `json:"nearCrossConnectOrCrossConnectGroupId,omitempty" tf:"near_cross_connect_or_cross_connect_group_id,omitempty"`

	// The port speed for this cross-connect. To get a list of the available port speeds, see ListCrossConnectPortSpeedShapes.  Example: 10 Gbps
	PortSpeedShapeName *string `json:"portSpeedShapeName,omitempty" tf:"port_speed_shape_name,omitempty"`
}

type CrossConnectObservation struct {

	// (Updatable) The OCID of the compartment to contain the cross-connect.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The OCID of the cross-connect group to put this cross-connect in.
	CrossConnectGroupID *string `json:"crossConnectGroupId,omitempty" tf:"cross_connect_group_id,omitempty"`

	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	CustomerReferenceName *string `json:"customerReferenceName,omitempty" tf:"customer_reference_name,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	FarCrossConnectOrCrossConnectGroupID *string `json:"farCrossConnectOrCrossConnectGroupId,omitempty" tf:"far_cross_connect_or_cross_connect_group_id,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// The cross-connect's Oracle ID (OCID).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`

	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see ListCrossConnectLocations.  Example: CyrusOne, Chandler, AZ
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// (Updatable) Properties used to configure MACsec (if capable).
	MacsecProperties []MacsecPropertiesObservation `json:"macsecProperties,omitempty" tf:"macsec_properties,omitempty"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	NearCrossConnectOrCrossConnectGroupID *string `json:"nearCrossConnectOrCrossConnectGroupId,omitempty" tf:"near_cross_connect_or_cross_connect_group_id,omitempty"`

	// The FastConnect device that terminates the logical connection. This device might be different than the device that terminates the physical connection.
	OciLogicalDeviceName *string `json:"ociLogicalDeviceName,omitempty" tf:"oci_logical_device_name,omitempty"`

	// The FastConnect device that terminates the physical connection.
	OciPhysicalDeviceName *string `json:"ociPhysicalDeviceName,omitempty" tf:"oci_physical_device_name,omitempty"`

	// A string identifying the meet-me room port for this cross-connect.
	PortName *string `json:"portName,omitempty" tf:"port_name,omitempty"`

	// The port speed for this cross-connect. To get a list of the available port speeds, see ListCrossConnectPortSpeedShapes.  Example: 10 Gbps
	PortSpeedShapeName *string `json:"portSpeedShapeName,omitempty" tf:"port_speed_shape_name,omitempty"`

	// (Updatable) Indicates whether or not MACsec is enabled.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the cross-connect was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type CrossConnectParameters struct {

	// (Updatable) The OCID of the compartment to contain the cross-connect.
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The OCID of the cross-connect group to put this cross-connect in.
	// +kubebuilder:validation:Optional
	CrossConnectGroupID *string `json:"crossConnectGroupId,omitempty" tf:"cross_connect_group_id,omitempty"`

	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	// +kubebuilder:validation:Optional
	CustomerReferenceName *string `json:"customerReferenceName,omitempty" tf:"customer_reference_name,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	// +kubebuilder:validation:Optional
	FarCrossConnectOrCrossConnectGroupID *string `json:"farCrossConnectOrCrossConnectGroupId,omitempty" tf:"far_cross_connect_or_cross_connect_group_id,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	// +mapType=granular
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	// +kubebuilder:validation:Optional
	IsActive *bool `json:"isActive,omitempty" tf:"is_active,omitempty"`

	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see ListCrossConnectLocations.  Example: CyrusOne, Chandler, AZ
	// +kubebuilder:validation:Optional
	LocationName *string `json:"locationName,omitempty" tf:"location_name,omitempty"`

	// (Updatable) Properties used to configure MACsec (if capable).
	// +kubebuilder:validation:Optional
	MacsecProperties []MacsecPropertiesParameters `json:"macsecProperties,omitempty" tf:"macsec_properties,omitempty"`

	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	// +kubebuilder:validation:Optional
	NearCrossConnectOrCrossConnectGroupID *string `json:"nearCrossConnectOrCrossConnectGroupId,omitempty" tf:"near_cross_connect_or_cross_connect_group_id,omitempty"`

	// The port speed for this cross-connect. To get a list of the available port speeds, see ListCrossConnectPortSpeedShapes.  Example: 10 Gbps
	// +kubebuilder:validation:Optional
	PortSpeedShapeName *string `json:"portSpeedShapeName,omitempty" tf:"port_speed_shape_name,omitempty"`
}

type MacsecPropertiesInitParameters struct {

	// (Updatable) Type of encryption cipher suite to use for the MACsec connection.
	EncryptionCipher *string `json:"encryptionCipher,omitempty" tf:"encryption_cipher,omitempty"`

	// (Updatable) Indicates whether unencrypted traffic is allowed if MACsec Key Agreement protocol (MKA) fails.
	IsUnprotectedTrafficAllowed *bool `json:"isUnprotectedTrafficAllowed,omitempty" tf:"is_unprotected_traffic_allowed,omitempty"`

	// (Updatable) Defines the secret OCIDs held in Vault that represent the MACsec key.
	PrimaryKey []PrimaryKeyInitParameters `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Updatable) Indicates whether or not MACsec is enabled.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type MacsecPropertiesObservation struct {

	// (Updatable) Type of encryption cipher suite to use for the MACsec connection.
	EncryptionCipher *string `json:"encryptionCipher,omitempty" tf:"encryption_cipher,omitempty"`

	// (Updatable) Indicates whether unencrypted traffic is allowed if MACsec Key Agreement protocol (MKA) fails.
	IsUnprotectedTrafficAllowed *bool `json:"isUnprotectedTrafficAllowed,omitempty" tf:"is_unprotected_traffic_allowed,omitempty"`

	// (Updatable) Defines the secret OCIDs held in Vault that represent the MACsec key.
	PrimaryKey []PrimaryKeyObservation `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Updatable) Indicates whether or not MACsec is enabled.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type MacsecPropertiesParameters struct {

	// (Updatable) Type of encryption cipher suite to use for the MACsec connection.
	// +kubebuilder:validation:Optional
	EncryptionCipher *string `json:"encryptionCipher,omitempty" tf:"encryption_cipher,omitempty"`

	// (Updatable) Indicates whether unencrypted traffic is allowed if MACsec Key Agreement protocol (MKA) fails.
	// +kubebuilder:validation:Optional
	IsUnprotectedTrafficAllowed *bool `json:"isUnprotectedTrafficAllowed,omitempty" tf:"is_unprotected_traffic_allowed,omitempty"`

	// (Updatable) Defines the secret OCIDs held in Vault that represent the MACsec key.
	// +kubebuilder:validation:Optional
	PrimaryKey []PrimaryKeyParameters `json:"primaryKey,omitempty" tf:"primary_key,omitempty"`

	// (Updatable) Indicates whether or not MACsec is enabled.
	// +kubebuilder:validation:Optional
	State *string `json:"state" tf:"state,omitempty"`
}

type PrimaryKeyInitParameters struct {

	// (Updatable) Secret OCID containing the Connectivity Association Key (CAK) of this MACsec key.
	ConnectivityAssociationKeySecretID *string `json:"connectivityAssociationKeySecretId,omitempty" tf:"connectivity_association_key_secret_id,omitempty"`

	// (Updatable) The secret version of the connectivity_association_key_secret_id secret in Vault.
	ConnectivityAssociationKeySecretVersion *string `json:"connectivityAssociationKeySecretVersion,omitempty" tf:"connectivity_association_key_secret_version,omitempty"`

	// (Updatable) Secret OCID containing the Connectivity association Key Name (CKN) of this MACsec key.
	ConnectivityAssociationNameSecretID *string `json:"connectivityAssociationNameSecretId,omitempty" tf:"connectivity_association_name_secret_id,omitempty"`

	// (Updatable) The secret version of the connectivity_association_name_secret_id secret in Vault.
	ConnectivityAssociationNameSecretVersion *string `json:"connectivityAssociationNameSecretVersion,omitempty" tf:"connectivity_association_name_secret_version,omitempty"`
}

type PrimaryKeyObservation struct {

	// (Updatable) Secret OCID containing the Connectivity Association Key (CAK) of this MACsec key.
	ConnectivityAssociationKeySecretID *string `json:"connectivityAssociationKeySecretId,omitempty" tf:"connectivity_association_key_secret_id,omitempty"`

	// (Updatable) The secret version of the connectivity_association_key_secret_id secret in Vault.
	ConnectivityAssociationKeySecretVersion *string `json:"connectivityAssociationKeySecretVersion,omitempty" tf:"connectivity_association_key_secret_version,omitempty"`

	// (Updatable) Secret OCID containing the Connectivity association Key Name (CKN) of this MACsec key.
	ConnectivityAssociationNameSecretID *string `json:"connectivityAssociationNameSecretId,omitempty" tf:"connectivity_association_name_secret_id,omitempty"`

	// (Updatable) The secret version of the connectivity_association_name_secret_id secret in Vault.
	ConnectivityAssociationNameSecretVersion *string `json:"connectivityAssociationNameSecretVersion,omitempty" tf:"connectivity_association_name_secret_version,omitempty"`
}

type PrimaryKeyParameters struct {

	// (Updatable) Secret OCID containing the Connectivity Association Key (CAK) of this MACsec key.
	// +kubebuilder:validation:Optional
	ConnectivityAssociationKeySecretID *string `json:"connectivityAssociationKeySecretId" tf:"connectivity_association_key_secret_id,omitempty"`

	// (Updatable) The secret version of the connectivity_association_key_secret_id secret in Vault.
	// +kubebuilder:validation:Optional
	ConnectivityAssociationKeySecretVersion *string `json:"connectivityAssociationKeySecretVersion,omitempty" tf:"connectivity_association_key_secret_version,omitempty"`

	// (Updatable) Secret OCID containing the Connectivity association Key Name (CKN) of this MACsec key.
	// +kubebuilder:validation:Optional
	ConnectivityAssociationNameSecretID *string `json:"connectivityAssociationNameSecretId" tf:"connectivity_association_name_secret_id,omitempty"`

	// (Updatable) The secret version of the connectivity_association_name_secret_id secret in Vault.
	// +kubebuilder:validation:Optional
	ConnectivityAssociationNameSecretVersion *string `json:"connectivityAssociationNameSecretVersion,omitempty" tf:"connectivity_association_name_secret_version,omitempty"`
}

// CrossConnectSpec defines the desired state of CrossConnect
type CrossConnectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CrossConnectParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CrossConnectInitParameters `json:"initProvider,omitempty"`
}

// CrossConnectStatus defines the observed state of CrossConnect.
type CrossConnectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CrossConnectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// CrossConnect is the Schema for the CrossConnects API. Provides the Cross Connect resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type CrossConnect struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.compartmentId) || (has(self.initProvider) && has(self.initProvider.compartmentId))",message="spec.forProvider.compartmentId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.locationName) || (has(self.initProvider) && has(self.initProvider.locationName))",message="spec.forProvider.locationName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.portSpeedShapeName) || (has(self.initProvider) && has(self.initProvider.portSpeedShapeName))",message="spec.forProvider.portSpeedShapeName is a required parameter"
	Spec   CrossConnectSpec   `json:"spec"`
	Status CrossConnectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CrossConnectList contains a list of CrossConnects
type CrossConnectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CrossConnect `json:"items"`
}

// Repository type metadata.
var (
	CrossConnect_Kind             = "CrossConnect"
	CrossConnect_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CrossConnect_Kind}.String()
	CrossConnect_KindAPIVersion   = CrossConnect_Kind + "." + CRDGroupVersion.String()
	CrossConnect_GroupVersionKind = CRDGroupVersion.WithKind(CrossConnect_Kind)
)

func init() {
	SchemeBuilder.Register(&CrossConnect{}, &CrossConnectList{})
}
