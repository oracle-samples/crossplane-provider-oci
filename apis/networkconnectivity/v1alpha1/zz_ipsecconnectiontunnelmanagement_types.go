/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BGPSessionInfoInitParameters struct {

	// If the tunnel's routing attribute is set to BGP (see IPSecConnectionTunnel), this ASN is required and used for the tunnel's BGP session. This is the ASN of the network on the CPE end of the BGP session. Can be a 2-byte or 4-byte ASN. Uses "asplain" format.
	CustomerBGPAsn *string `json:"customerBgpAsn,omitempty" tf:"customer_bgp_asn,omitempty"`

	// The IP address for the CPE end of the inside tunnel interface.
	CustomerInterfaceIP *string `json:"customerInterfaceIp,omitempty" tf:"customer_interface_ip,omitempty"`

	// The IPv6 address for the CPE end of the inside tunnel interface. This IP address is optional.
	CustomerInterfaceIPv6 *string `json:"customerInterfaceIpv6,omitempty" tf:"customer_interface_ipv6,omitempty"`

	// The IP address for the Oracle end of the inside tunnel interface.
	OracleInterfaceIP *string `json:"oracleInterfaceIp,omitempty" tf:"oracle_interface_ip,omitempty"`

	// The IPv6 address for the Oracle end of the inside tunnel interface. This IP address is optional.
	OracleInterfaceIPv6 *string `json:"oracleInterfaceIpv6,omitempty" tf:"oracle_interface_ipv6,omitempty"`
}

type BGPSessionInfoObservation struct {

	// The state of the BGP IPv6 session.
	BGPIPv6State *string `json:"bgpIpv6State,omitempty" tf:"bgp_ipv6_state,omitempty"`

	// The IPSec connection's tunnel's lifecycle state.
	BGPIpv6State *string `json:"bgpIpv6State,omitempty" tf:"bgp_ipv6state,omitempty"`

	// The state of the BGP session.
	BGPState *string `json:"bgpState,omitempty" tf:"bgp_state,omitempty"`

	// If the tunnel's routing attribute is set to BGP (see IPSecConnectionTunnel), this ASN is required and used for the tunnel's BGP session. This is the ASN of the network on the CPE end of the BGP session. Can be a 2-byte or 4-byte ASN. Uses "asplain" format.
	CustomerBGPAsn *string `json:"customerBgpAsn,omitempty" tf:"customer_bgp_asn,omitempty"`

	// The IP address for the CPE end of the inside tunnel interface.
	CustomerInterfaceIP *string `json:"customerInterfaceIp,omitempty" tf:"customer_interface_ip,omitempty"`

	// The IPv6 address for the CPE end of the inside tunnel interface. This IP address is optional.
	CustomerInterfaceIPv6 *string `json:"customerInterfaceIpv6,omitempty" tf:"customer_interface_ipv6,omitempty"`

	// The Oracle BGP ASN.
	OracleBGPAsn *string `json:"oracleBgpAsn,omitempty" tf:"oracle_bgp_asn,omitempty"`

	// The IP address for the Oracle end of the inside tunnel interface.
	OracleInterfaceIP *string `json:"oracleInterfaceIp,omitempty" tf:"oracle_interface_ip,omitempty"`

	// The IPv6 address for the Oracle end of the inside tunnel interface. This IP address is optional.
	OracleInterfaceIPv6 *string `json:"oracleInterfaceIpv6,omitempty" tf:"oracle_interface_ipv6,omitempty"`
}

type BGPSessionInfoParameters struct {

	// If the tunnel's routing attribute is set to BGP (see IPSecConnectionTunnel), this ASN is required and used for the tunnel's BGP session. This is the ASN of the network on the CPE end of the BGP session. Can be a 2-byte or 4-byte ASN. Uses "asplain" format.
	// +kubebuilder:validation:Optional
	CustomerBGPAsn *string `json:"customerBgpAsn,omitempty" tf:"customer_bgp_asn,omitempty"`

	// The IP address for the CPE end of the inside tunnel interface.
	// +kubebuilder:validation:Optional
	CustomerInterfaceIP *string `json:"customerInterfaceIp,omitempty" tf:"customer_interface_ip,omitempty"`

	// The IPv6 address for the CPE end of the inside tunnel interface. This IP address is optional.
	// +kubebuilder:validation:Optional
	CustomerInterfaceIPv6 *string `json:"customerInterfaceIpv6,omitempty" tf:"customer_interface_ipv6,omitempty"`

	// The IP address for the Oracle end of the inside tunnel interface.
	// +kubebuilder:validation:Optional
	OracleInterfaceIP *string `json:"oracleInterfaceIp,omitempty" tf:"oracle_interface_ip,omitempty"`

	// The IPv6 address for the Oracle end of the inside tunnel interface. This IP address is optional.
	// +kubebuilder:validation:Optional
	OracleInterfaceIPv6 *string `json:"oracleInterfaceIpv6,omitempty" tf:"oracle_interface_ipv6,omitempty"`
}

type DpdConfigInitParameters struct {

	// This option defines whether DPD can be initiated from the Oracle side of the connection. INITIATE_AND_RESPOND or RESPOND_ONLY
	DpdMode *string `json:"dpdMode,omitempty" tf:"dpd_mode,omitempty"`

	// DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
	DpdTimeoutInSec *float64 `json:"dpdTimeoutInSec,omitempty" tf:"dpd_timeout_in_sec,omitempty"`
}

type DpdConfigObservation struct {

	// This option defines whether DPD can be initiated from the Oracle side of the connection. INITIATE_AND_RESPOND or RESPOND_ONLY
	DpdMode *string `json:"dpdMode,omitempty" tf:"dpd_mode,omitempty"`

	// DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
	DpdTimeoutInSec *float64 `json:"dpdTimeoutInSec,omitempty" tf:"dpd_timeout_in_sec,omitempty"`
}

type DpdConfigParameters struct {

	// This option defines whether DPD can be initiated from the Oracle side of the connection. INITIATE_AND_RESPOND or RESPOND_ONLY
	// +kubebuilder:validation:Optional
	DpdMode *string `json:"dpdMode,omitempty" tf:"dpd_mode,omitempty"`

	// DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
	// +kubebuilder:validation:Optional
	DpdTimeoutInSec *float64 `json:"dpdTimeoutInSec,omitempty" tf:"dpd_timeout_in_sec,omitempty"`
}

type EncryptionDomainConfigInitParameters struct {

	// Lists IPv4 or IPv6-enabled subnets in your on-premises network.
	CpeTrafficSelector []*string `json:"cpeTrafficSelector,omitempty" tf:"cpe_traffic_selector,omitempty"`

	// Lists IPv4 or IPv6-enabled subnets in your Oracle tenancy.
	OracleTrafficSelector []*string `json:"oracleTrafficSelector,omitempty" tf:"oracle_traffic_selector,omitempty"`
}

type EncryptionDomainConfigObservation struct {

	// Lists IPv4 or IPv6-enabled subnets in your on-premises network.
	CpeTrafficSelector []*string `json:"cpeTrafficSelector,omitempty" tf:"cpe_traffic_selector,omitempty"`

	// Lists IPv4 or IPv6-enabled subnets in your Oracle tenancy.
	OracleTrafficSelector []*string `json:"oracleTrafficSelector,omitempty" tf:"oracle_traffic_selector,omitempty"`
}

type EncryptionDomainConfigParameters struct {

	// Lists IPv4 or IPv6-enabled subnets in your on-premises network.
	// +kubebuilder:validation:Optional
	CpeTrafficSelector []*string `json:"cpeTrafficSelector,omitempty" tf:"cpe_traffic_selector,omitempty"`

	// Lists IPv4 or IPv6-enabled subnets in your Oracle tenancy.
	// +kubebuilder:validation:Optional
	OracleTrafficSelector []*string `json:"oracleTrafficSelector,omitempty" tf:"oracle_traffic_selector,omitempty"`
}

type IpsecConnectionTunnelManagementInitParameters struct {

	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BGPSessionInfo []BGPSessionInfoInitParameters `json:"bgpSessionInfo,omitempty" tf:"bgp_session_info,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	DpdConfig []DpdConfigInitParameters `json:"dpdConfig,omitempty" tf:"dpd_config,omitempty"`

	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig []EncryptionDomainConfigInitParameters `json:"encryptionDomainConfig,omitempty" tf:"encryption_domain_config,omitempty"`

	// Internet Key Exchange protocol version.
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The OCID of the IPSec connection.
	IpsecID *string `json:"ipsecId,omitempty" tf:"ipsec_id,omitempty"`

	// By default (the AUTO setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	NATTranslationEnabled *string `json:"natTranslationEnabled,omitempty" tf:"nat_translation_enabled,omitempty"`

	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (RESPONDER_ONLY), or both respond to and initiate requests (INITIATOR_OR_RESPONDER).
	OracleCanInitiate *string `json:"oracleCanInitiate,omitempty" tf:"oracle_can_initiate,omitempty"`

	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	PhaseOneDetails []PhaseOneDetailsInitParameters `json:"phaseOneDetails,omitempty" tf:"phase_one_details,omitempty"`

	// Configuration details for IPSec phase two configuration parameters.
	PhaseTwoDetails []PhaseTwoDetailsInitParameters `json:"phaseTwoDetails,omitempty" tf:"phase_two_details,omitempty"`

	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing *string `json:"routing,omitempty" tf:"routing,omitempty"`

	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with UpdateIPSecConnectionTunnelSharedSecret.  Example: EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o
	SharedSecretSecretRef *v1.SecretKeySelector `json:"sharedSecretSecretRef,omitempty" tf:"-"`

	// The OCID of the IPSec connection's tunnel.
	TunnelID *string `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`
}

type IpsecConnectionTunnelManagementObservation struct {

	// The list of virtual circuit OCIDs over which your network can reach this tunnel.
	AssociatedVirtualCircuits []*string `json:"associatedVirtualCircuits,omitempty" tf:"associated_virtual_circuits,omitempty"`

	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BGPSessionInfo []BGPSessionInfoObservation `json:"bgpSessionInfo,omitempty" tf:"bgp_session_info,omitempty"`

	// The OCID of the compartment containing the tunnel.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The IP address of the CPE device's VPN headend.  Example: 203.0.113.22
	CpeIP *string `json:"cpeIp,omitempty" tf:"cpe_ip,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	DpdConfig []DpdConfigObservation `json:"dpdConfig,omitempty" tf:"dpd_config,omitempty"`

	// This option defines whether DPD can be initiated from the Oracle side of the connection. INITIATE_AND_RESPOND or RESPOND_ONLY
	DpdMode *string `json:"dpdMode,omitempty" tf:"dpd_mode,omitempty"`

	// DPD timeout in seconds. This sets the longest interval between CPE device health messages before the IPSec connection indicates it has lost contact with the CPE. The default is 20 seconds.
	DpdTimeoutInSec *float64 `json:"dpdTimeoutInSec,omitempty" tf:"dpd_timeout_in_sec,omitempty"`

	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig []EncryptionDomainConfigObservation `json:"encryptionDomainConfig,omitempty" tf:"encryption_domain_config,omitempty"`

	// The tunnel's Oracle ID (OCID).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Internet Key Exchange protocol version.
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The OCID of the IPSec connection.
	IpsecID *string `json:"ipsecId,omitempty" tf:"ipsec_id,omitempty"`

	// By default (the AUTO setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	NATTranslationEnabled *string `json:"natTranslationEnabled,omitempty" tf:"nat_translation_enabled,omitempty"`

	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (RESPONDER_ONLY), or both respond to and initiate requests (INITIATOR_OR_RESPONDER).
	OracleCanInitiate *string `json:"oracleCanInitiate,omitempty" tf:"oracle_can_initiate,omitempty"`

	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	PhaseOneDetails []PhaseOneDetailsObservation `json:"phaseOneDetails,omitempty" tf:"phase_one_details,omitempty"`

	// Configuration details for IPSec phase two configuration parameters.
	PhaseTwoDetails []PhaseTwoDetailsObservation `json:"phaseTwoDetails,omitempty" tf:"phase_two_details,omitempty"`

	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing *string `json:"routing,omitempty" tf:"routing,omitempty"`

	// The IPSec connection's tunnel's lifecycle state.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The tunnel's current state.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeStatusUpdated *string `json:"timeStatusUpdated,omitempty" tf:"time_status_updated,omitempty"`

	// The OCID of the IPSec connection's tunnel.
	TunnelID *string `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`

	// The IP address of Oracle's VPN headend.  Example: 129.146.17.50
	VPNIP *string `json:"vpnIp,omitempty" tf:"vpn_ip,omitempty"`
}

type IpsecConnectionTunnelManagementParameters struct {

	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	// +kubebuilder:validation:Optional
	BGPSessionInfo []BGPSessionInfoParameters `json:"bgpSessionInfo,omitempty" tf:"bgp_session_info,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	DpdConfig []DpdConfigParameters `json:"dpdConfig,omitempty" tf:"dpd_config,omitempty"`

	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	// +kubebuilder:validation:Optional
	EncryptionDomainConfig []EncryptionDomainConfigParameters `json:"encryptionDomainConfig,omitempty" tf:"encryption_domain_config,omitempty"`

	// Internet Key Exchange protocol version.
	// +kubebuilder:validation:Optional
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The OCID of the IPSec connection.
	// +kubebuilder:validation:Optional
	IpsecID *string `json:"ipsecId,omitempty" tf:"ipsec_id,omitempty"`

	// By default (the AUTO setting), IKE sends packets with a source and destination port set to 500, and when it detects that the port used to forward packets has changed (most likely because a NAT device is between the CPE device and the Oracle VPN headend) it will try to negotiate the use of NAT-T.
	// +kubebuilder:validation:Optional
	NATTranslationEnabled *string `json:"natTranslationEnabled,omitempty" tf:"nat_translation_enabled,omitempty"`

	// Indicates whether Oracle can only respond to a request to start an IPSec tunnel from the CPE device (RESPONDER_ONLY), or both respond to and initiate requests (INITIATOR_OR_RESPONDER).
	// +kubebuilder:validation:Optional
	OracleCanInitiate *string `json:"oracleCanInitiate,omitempty" tf:"oracle_can_initiate,omitempty"`

	// Configuration details for IKE phase one (ISAKMP) configuration parameters.
	// +kubebuilder:validation:Optional
	PhaseOneDetails []PhaseOneDetailsParameters `json:"phaseOneDetails,omitempty" tf:"phase_one_details,omitempty"`

	// Configuration details for IPSec phase two configuration parameters.
	// +kubebuilder:validation:Optional
	PhaseTwoDetails []PhaseTwoDetailsParameters `json:"phaseTwoDetails,omitempty" tf:"phase_two_details,omitempty"`

	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	// +kubebuilder:validation:Optional
	Routing *string `json:"routing,omitempty" tf:"routing,omitempty"`

	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with UpdateIPSecConnectionTunnelSharedSecret.  Example: EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o
	// +kubebuilder:validation:Optional
	SharedSecretSecretRef *v1.SecretKeySelector `json:"sharedSecretSecretRef,omitempty" tf:"-"`

	// The OCID of the IPSec connection's tunnel.
	// +kubebuilder:validation:Optional
	TunnelID *string `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`
}

type PhaseOneDetailsInitParameters struct {

	// The custom authentication algorithm proposed during phase one tunnel negotiation.
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	// The custom Diffie-Hellman group proposed during phase one tunnel negotiation.
	CustomDhGroup *string `json:"customDhGroup,omitempty" tf:"custom_dh_group,omitempty"`

	// The custom encryption algorithm proposed during phase one tunnel negotiation.
	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	// Indicates whether custom configuration is enabled for phase one options.
	IsCustomPhaseOneConfig *bool `json:"isCustomPhaseOneConfig,omitempty" tf:"is_custom_phase_one_config,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type PhaseOneDetailsObservation struct {

	// The custom authentication algorithm proposed during phase one tunnel negotiation.
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	// The custom Diffie-Hellman group proposed during phase one tunnel negotiation.
	CustomDhGroup *string `json:"customDhGroup,omitempty" tf:"custom_dh_group,omitempty"`

	// The custom encryption algorithm proposed during phase one tunnel negotiation.
	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	// Indicates whether custom configuration is enabled for phase one options.
	IsCustomPhaseOneConfig *bool `json:"isCustomPhaseOneConfig,omitempty" tf:"is_custom_phase_one_config,omitempty"`

	// Indicates whether IKE phase one is established.
	IsIkeEstablished *bool `json:"isIkeEstablished,omitempty" tf:"is_ike_established,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// The negotiated authentication algorithm.
	NegotiatedAuthenticationAlgorithm *string `json:"negotiatedAuthenticationAlgorithm,omitempty" tf:"negotiated_authentication_algorithm,omitempty"`

	// The negotiated Diffie-Hellman group.
	NegotiatedDhGroup *string `json:"negotiatedDhGroup,omitempty" tf:"negotiated_dh_group,omitempty"`

	// The negotiated encryption algorithm.
	NegotiatedEncryptionAlgorithm *string `json:"negotiatedEncryptionAlgorithm,omitempty" tf:"negotiated_encryption_algorithm,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	RemainingLifetime *string `json:"remainingLifetime,omitempty" tf:"remaining_lifetime,omitempty"`

	// The remaining lifetime before the key is refreshed.
	RemainingLifetimeInt *float64 `json:"remainingLifetimeInt,omitempty" tf:"remaining_lifetime_int,omitempty"`

	// The date and time we retrieved the remaining lifetime, in the format defined by RFC3339. Example: 2016-08-25T21:10:29.600Z
	RemainingLifetimeLastRetrieved *string `json:"remainingLifetimeLastRetrieved,omitempty" tf:"remaining_lifetime_last_retrieved,omitempty"`
}

type PhaseOneDetailsParameters struct {

	// The custom authentication algorithm proposed during phase one tunnel negotiation.
	// +kubebuilder:validation:Optional
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	// The custom Diffie-Hellman group proposed during phase one tunnel negotiation.
	// +kubebuilder:validation:Optional
	CustomDhGroup *string `json:"customDhGroup,omitempty" tf:"custom_dh_group,omitempty"`

	// The custom encryption algorithm proposed during phase one tunnel negotiation.
	// +kubebuilder:validation:Optional
	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	// Indicates whether custom configuration is enabled for phase one options.
	// +kubebuilder:validation:Optional
	IsCustomPhaseOneConfig *bool `json:"isCustomPhaseOneConfig,omitempty" tf:"is_custom_phase_one_config,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	// +kubebuilder:validation:Optional
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type PhaseTwoDetailsInitParameters struct {

	// The custom authentication algorithm proposed during phase one tunnel negotiation.
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	// The custom encryption algorithm proposed during phase one tunnel negotiation.
	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	// The Diffie-Hellman group used for PFS, if PFS is enabled.
	DhGroup *string `json:"dhGroup,omitempty" tf:"dh_group,omitempty"`

	// Indicates whether custom configuration is enabled for phase two options.
	IsCustomPhaseTwoConfig *bool `json:"isCustomPhaseTwoConfig,omitempty" tf:"is_custom_phase_two_config,omitempty"`

	// Indicates whether perfect forward secrecy (PFS) is enabled.
	IsPfsEnabled *bool `json:"isPfsEnabled,omitempty" tf:"is_pfs_enabled,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

type PhaseTwoDetailsObservation struct {

	// The custom authentication algorithm proposed during phase one tunnel negotiation.
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	// The custom encryption algorithm proposed during phase one tunnel negotiation.
	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	// The Diffie-Hellman group used for PFS, if PFS is enabled.
	DhGroup *string `json:"dhGroup,omitempty" tf:"dh_group,omitempty"`

	// Indicates whether custom configuration is enabled for phase two options.
	IsCustomPhaseTwoConfig *bool `json:"isCustomPhaseTwoConfig,omitempty" tf:"is_custom_phase_two_config,omitempty"`

	// Indicates that ESP phase two is established.
	IsEspEstablished *bool `json:"isEspEstablished,omitempty" tf:"is_esp_established,omitempty"`

	// Indicates whether perfect forward secrecy (PFS) is enabled.
	IsPfsEnabled *bool `json:"isPfsEnabled,omitempty" tf:"is_pfs_enabled,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	// The negotiated authentication algorithm.
	NegotiatedAuthenticationAlgorithm *string `json:"negotiatedAuthenticationAlgorithm,omitempty" tf:"negotiated_authentication_algorithm,omitempty"`

	// The negotiated Diffie-Hellman group.
	NegotiatedDhGroup *string `json:"negotiatedDhGroup,omitempty" tf:"negotiated_dh_group,omitempty"`

	// The negotiated encryption algorithm.
	NegotiatedEncryptionAlgorithm *string `json:"negotiatedEncryptionAlgorithm,omitempty" tf:"negotiated_encryption_algorithm,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	RemainingLifetime *string `json:"remainingLifetime,omitempty" tf:"remaining_lifetime,omitempty"`

	// The remaining lifetime before the key is refreshed.
	RemainingLifetimeInt *float64 `json:"remainingLifetimeInt,omitempty" tf:"remaining_lifetime_int,omitempty"`

	// The date and time we retrieved the remaining lifetime, in the format defined by RFC3339. Example: 2016-08-25T21:10:29.600Z
	RemainingLifetimeLastRetrieved *string `json:"remainingLifetimeLastRetrieved,omitempty" tf:"remaining_lifetime_last_retrieved,omitempty"`
}

type PhaseTwoDetailsParameters struct {

	// The custom authentication algorithm proposed during phase one tunnel negotiation.
	// +kubebuilder:validation:Optional
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	// The custom encryption algorithm proposed during phase one tunnel negotiation.
	// +kubebuilder:validation:Optional
	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	// The Diffie-Hellman group used for PFS, if PFS is enabled.
	// +kubebuilder:validation:Optional
	DhGroup *string `json:"dhGroup,omitempty" tf:"dh_group,omitempty"`

	// Indicates whether custom configuration is enabled for phase two options.
	// +kubebuilder:validation:Optional
	IsCustomPhaseTwoConfig *bool `json:"isCustomPhaseTwoConfig,omitempty" tf:"is_custom_phase_two_config,omitempty"`

	// Indicates whether perfect forward secrecy (PFS) is enabled.
	// +kubebuilder:validation:Optional
	IsPfsEnabled *bool `json:"isPfsEnabled,omitempty" tf:"is_pfs_enabled,omitempty"`

	// Internet key association (IKE) session key lifetime in seconds for IPSec phase one. The default is 28800 which is equivalent to 8 hours.
	// +kubebuilder:validation:Optional
	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`
}

// IpsecConnectionTunnelManagementSpec defines the desired state of IpsecConnectionTunnelManagement
type IpsecConnectionTunnelManagementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpsecConnectionTunnelManagementParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IpsecConnectionTunnelManagementInitParameters `json:"initProvider,omitempty"`
}

// IpsecConnectionTunnelManagementStatus defines the observed state of IpsecConnectionTunnelManagement.
type IpsecConnectionTunnelManagementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpsecConnectionTunnelManagementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// IpsecConnectionTunnelManagement is the Schema for the IpsecConnectionTunnelManagements API. Provides details about a specific Ip Sec Connection Tunnel in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type IpsecConnectionTunnelManagement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipsecId) || (has(self.initProvider) && has(self.initProvider.ipsecId))",message="spec.forProvider.ipsecId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.tunnelId) || (has(self.initProvider) && has(self.initProvider.tunnelId))",message="spec.forProvider.tunnelId is a required parameter"
	Spec   IpsecConnectionTunnelManagementSpec   `json:"spec"`
	Status IpsecConnectionTunnelManagementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpsecConnectionTunnelManagementList contains a list of IpsecConnectionTunnelManagements
type IpsecConnectionTunnelManagementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpsecConnectionTunnelManagement `json:"items"`
}

// Repository type metadata.
var (
	IpsecConnectionTunnelManagement_Kind             = "IpsecConnectionTunnelManagement"
	IpsecConnectionTunnelManagement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpsecConnectionTunnelManagement_Kind}.String()
	IpsecConnectionTunnelManagement_KindAPIVersion   = IpsecConnectionTunnelManagement_Kind + "." + CRDGroupVersion.String()
	IpsecConnectionTunnelManagement_GroupVersionKind = CRDGroupVersion.WithKind(IpsecConnectionTunnelManagement_Kind)
)

func init() {
	SchemeBuilder.Register(&IpsecConnectionTunnelManagement{}, &IpsecConnectionTunnelManagementList{})
}
