/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VolumeGroupObservation struct {

	// The OCID for the volume group.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specifies whether the newly created cloned volume group's data has finished copying from the source volume group or backup.
	IsHydrated *bool `json:"isHydrated,omitempty" tf:"is_hydrated,omitempty"`

	// The aggregate size of the volume group in GBs.
	SizeInGbs *string `json:"sizeInGbs,omitempty" tf:"size_in_gbs,omitempty"`

	// The aggregate size of the volume group in MBs.
	SizeInMbs *string `json:"sizeInMbs,omitempty" tf:"size_in_mbs,omitempty"`

	// The current state of a volume group.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the volume group was created. Format defined by RFC3339.
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// (Updatable) The list of volume group replicas that this volume group will be enabled to have in the specified destination availability domains.
	// +kubebuilder:validation:Optional
	VolumeGroupReplicas []VolumeGroupReplicasObservation `json:"volumeGroupReplicas,omitempty" tf:"volume_group_replicas,omitempty"`
}

type VolumeGroupParameters struct {

	// The availability domain of the volume group.
	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// If provided, specifies the ID of the volume backup policy to assign to the newly created volume group. If omitted, no policy will be assigned.
	// +kubebuilder:validation:Optional
	BackupPolicyID *string `json:"backupPolicyId,omitempty" tf:"backup_policy_id,omitempty"`

	// (Updatable) The OCID of the compartment that contains the volume group.
	// +crossplane:generate:reference:type=github.com/oracle/provider-oci/apis/identity/v1alpha1.Compartment
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// Reference to a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDRef *v1.Reference `json:"compartmentIdRef,omitempty" tf:"-"`

	// Selector for a Compartment in identity to populate compartmentId.
	// +kubebuilder:validation:Optional
	CompartmentIDSelector *v1.Selector `json:"compartmentIdSelector,omitempty" tf:"-"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// +kubebuilder:validation:Optional
	PreserveVolumeReplica *bool `json:"preserveVolumeReplica,omitempty" tf:"preserve_volume_replica,omitempty"`

	// Specifies the source for a volume group.
	// +kubebuilder:validation:Required
	SourceDetails []VolumeGroupSourceDetailsParameters `json:"sourceDetails" tf:"source_details,omitempty"`

	// (Updatable) The list of volume group replicas that this volume group will be enabled to have in the specified destination availability domains.
	// +kubebuilder:validation:Optional
	VolumeGroupReplicas []VolumeGroupReplicasParameters `json:"volumeGroupReplicas,omitempty" tf:"volume_group_replicas,omitempty"`

	// +kubebuilder:validation:Optional
	VolumeGroupReplicasDeletion *bool `json:"volumeGroupReplicasDeletion,omitempty" tf:"volume_group_replicas_deletion,omitempty"`

	// OCIDs for the volumes in this volume group.
	// +kubebuilder:validation:Optional
	VolumeIds []*string `json:"volumeIds,omitempty" tf:"volume_ids,omitempty"`
}

type VolumeGroupReplicasObservation struct {

	// The OCID of the volume group replica.
	VolumeGroupReplicaID *string `json:"volumeGroupReplicaId,omitempty" tf:"volume_group_replica_id,omitempty"`
}

type VolumeGroupReplicasParameters struct {

	// The availability domain of the volume group.
	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`
}

type VolumeGroupSourceDetailsObservation struct {
}

type VolumeGroupSourceDetailsParameters struct {

	// The type can be one of these values: volumeGroupBackupId, volumeGroupId, volumeGroupReplicaId, volumeIds
	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`

	// The OCID of the volume group backup to restore from.
	// +kubebuilder:validation:Optional
	VolumeGroupBackupID *string `json:"volumeGroupBackupId,omitempty" tf:"volume_group_backup_id,omitempty"`

	// The OCID of the volume group to clone from.
	// +kubebuilder:validation:Optional
	VolumeGroupID *string `json:"volumeGroupId,omitempty" tf:"volume_group_id,omitempty"`

	// The OCID of the volume group replica.
	// +kubebuilder:validation:Optional
	VolumeGroupReplicaID *string `json:"volumeGroupReplicaId,omitempty" tf:"volume_group_replica_id,omitempty"`

	// OCIDs for the volumes in this volume group.
	// +crossplane:generate:reference:type=Volume
	// +kubebuilder:validation:Optional
	VolumeIds []*string `json:"volumeIds,omitempty" tf:"volume_ids,omitempty"`

	// References to Volume to populate volumeIds.
	// +kubebuilder:validation:Optional
	VolumeIdsRefs []v1.Reference `json:"volumeIdsRefs,omitempty" tf:"-"`

	// Selector for a list of Volume to populate volumeIds.
	// +kubebuilder:validation:Optional
	VolumeIdsSelector *v1.Selector `json:"volumeIdsSelector,omitempty" tf:"-"`
}

// VolumeGroupSpec defines the desired state of VolumeGroup
type VolumeGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeGroupParameters `json:"forProvider"`
}

// VolumeGroupStatus defines the observed state of VolumeGroup.
type VolumeGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeGroup is the Schema for the VolumeGroups API. Provides the Volume Group resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type VolumeGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeGroupSpec   `json:"spec"`
	Status            VolumeGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeGroupList contains a list of VolumeGroups
type VolumeGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeGroup `json:"items"`
}

// Repository type metadata.
var (
	VolumeGroup_Kind             = "VolumeGroup"
	VolumeGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeGroup_Kind}.String()
	VolumeGroup_KindAPIVersion   = VolumeGroup_Kind + "." + CRDGroupVersion.String()
	VolumeGroup_GroupVersionKind = CRDGroupVersion.WithKind(VolumeGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeGroup{}, &VolumeGroupList{})
}
