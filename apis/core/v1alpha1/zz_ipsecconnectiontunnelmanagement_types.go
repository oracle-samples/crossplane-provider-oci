/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BGPSessionInfoObservation struct {

	// The IPSec connection's tunnel's lifecycle state.
	BGPIpv6State *string `json:"bgpIpv6State,omitempty" tf:"bgp_ipv6state,omitempty"`

	// the state of the BGP.
	BGPState *string `json:"bgpState,omitempty" tf:"bgp_state,omitempty"`

	// This is the value of the Oracle Bgp ASN in asplain format, as a string. Example: 1587232876 (4 byte ASN) or 12345 (2 byte ASN)
	OracleBGPAsn *string `json:"oracleBgpAsn,omitempty" tf:"oracle_bgp_asn,omitempty"`
}

type BGPSessionInfoParameters struct {

	// If the tunnel's routing attribute is set to BGP (see IPSecConnectionTunnel), this ASN is required and used for the tunnel's BGP session. This is the ASN of the network on the CPE end of the BGP session. Can be a 2-byte or 4-byte ASN. Uses "asplain" format.
	// +kubebuilder:validation:Optional
	CustomerBGPAsn *string `json:"customerBgpAsn,omitempty" tf:"customer_bgp_asn,omitempty"`

	// The IP address for the CPE end of the inside tunnel interface.
	// +kubebuilder:validation:Optional
	CustomerInterfaceIP *string `json:"customerInterfaceIp,omitempty" tf:"customer_interface_ip,omitempty"`

	// The IP address for the Oracle end of the inside tunnel interface.
	// +kubebuilder:validation:Optional
	OracleInterfaceIP *string `json:"oracleInterfaceIp,omitempty" tf:"oracle_interface_ip,omitempty"`
}

type DpdConfigObservation struct {
}

type DpdConfigParameters struct {

	// +kubebuilder:validation:Optional
	DpdMode *string `json:"dpdMode,omitempty" tf:"dpd_mode,omitempty"`

	// +kubebuilder:validation:Optional
	DpdTimeoutInSec *float64 `json:"dpdTimeoutInSec,omitempty" tf:"dpd_timeout_in_sec,omitempty"`
}

type EncryptionDomainConfigObservation struct {
}

type EncryptionDomainConfigParameters struct {

	// Lists IPv4 or IPv6-enabled subnets in your on-premises network.
	// +kubebuilder:validation:Optional
	CpeTrafficSelector []*string `json:"cpeTrafficSelector,omitempty" tf:"cpe_traffic_selector,omitempty"`

	// Lists IPv4 or IPv6-enabled subnets in your Oracle tenancy.
	// +kubebuilder:validation:Optional
	OracleTrafficSelector []*string `json:"oracleTrafficSelector,omitempty" tf:"oracle_traffic_selector,omitempty"`
}

type IpsecConnectionTunnelManagementObservation struct {

	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	// +kubebuilder:validation:Optional
	BGPSessionInfo []BGPSessionInfoObservation `json:"bgpSessionInfo,omitempty" tf:"bgp_session_info,omitempty"`

	// The OCID of the compartment containing the tunnel.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The IP address of Cpe headend.  Example: 129.146.17.50
	CpeIP *string `json:"cpeIp,omitempty" tf:"cpe_ip,omitempty"`

	DpdMode *string `json:"dpdMode,omitempty" tf:"dpd_mode,omitempty"`

	DpdTimeoutInSec *float64 `json:"dpdTimeoutInSec,omitempty" tf:"dpd_timeout_in_sec,omitempty"`

	// The tunnel's Oracle ID (OCID).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	NATTranslationEnabled *string `json:"natTranslationEnabled,omitempty" tf:"nat_translation_enabled,omitempty"`

	OracleCanInitiate *string `json:"oracleCanInitiate,omitempty" tf:"oracle_can_initiate,omitempty"`

	PhaseOneDetails []PhaseOneDetailsObservation `json:"phaseOneDetails,omitempty" tf:"phase_one_details,omitempty"`

	PhaseTwoDetails []PhaseTwoDetailsObservation `json:"phaseTwoDetails,omitempty" tf:"phase_two_details,omitempty"`

	// The IPSec connection's tunnel's lifecycle state.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The tunnel's current state.
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeStatusUpdated *string `json:"timeStatusUpdated,omitempty" tf:"time_status_updated,omitempty"`

	// The IP address of Oracle's VPN headend.  Example: 129.146.17.50
	VPNIP *string `json:"vpnIp,omitempty" tf:"vpn_ip,omitempty"`
}

type IpsecConnectionTunnelManagementParameters struct {

	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	// +kubebuilder:validation:Optional
	BGPSessionInfo []BGPSessionInfoParameters `json:"bgpSessionInfo,omitempty" tf:"bgp_session_info,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	DpdConfig []DpdConfigParameters `json:"dpdConfig,omitempty" tf:"dpd_config,omitempty"`

	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	// +kubebuilder:validation:Optional
	EncryptionDomainConfig []EncryptionDomainConfigParameters `json:"encryptionDomainConfig,omitempty" tf:"encryption_domain_config,omitempty"`

	// Internet Key Exchange protocol version.
	// +kubebuilder:validation:Optional
	IkeVersion *string `json:"ikeVersion,omitempty" tf:"ike_version,omitempty"`

	// The OCID of the IPSec connection.
	// +kubebuilder:validation:Required
	IpsecID *string `json:"ipsecId" tf:"ipsec_id,omitempty"`

	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	// +kubebuilder:validation:Required
	Routing *string `json:"routing" tf:"routing,omitempty"`

	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with UpdateIPSecConnectionTunnelSharedSecret.  Example: EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o
	// +kubebuilder:validation:Optional
	SharedSecret *string `json:"sharedSecret,omitempty" tf:"shared_secret,omitempty"`

	// The OCID of the IPSec connection's tunnel.
	// +kubebuilder:validation:Required
	TunnelID *string `json:"tunnelId" tf:"tunnel_id,omitempty"`
}

type PhaseOneDetailsObservation struct {
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	CustomDhGroup *string `json:"customDhGroup,omitempty" tf:"custom_dh_group,omitempty"`

	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	IsCustomPhaseOneConfig *bool `json:"isCustomPhaseOneConfig,omitempty" tf:"is_custom_phase_one_config,omitempty"`

	IsIkeEstablished *bool `json:"isIkeEstablished,omitempty" tf:"is_ike_established,omitempty"`

	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	NegotiatedAuthenticationAlgorithm *string `json:"negotiatedAuthenticationAlgorithm,omitempty" tf:"negotiated_authentication_algorithm,omitempty"`

	NegotiatedDhGroup *string `json:"negotiatedDhGroup,omitempty" tf:"negotiated_dh_group,omitempty"`

	NegotiatedEncryptionAlgorithm *string `json:"negotiatedEncryptionAlgorithm,omitempty" tf:"negotiated_encryption_algorithm,omitempty"`

	RemainingLifetime *string `json:"remainingLifetime,omitempty" tf:"remaining_lifetime,omitempty"`

	RemainingLifetimeLastRetrieved *string `json:"remainingLifetimeLastRetrieved,omitempty" tf:"remaining_lifetime_last_retrieved,omitempty"`
}

type PhaseOneDetailsParameters struct {
}

type PhaseTwoDetailsObservation struct {
	CustomAuthenticationAlgorithm *string `json:"customAuthenticationAlgorithm,omitempty" tf:"custom_authentication_algorithm,omitempty"`

	CustomEncryptionAlgorithm *string `json:"customEncryptionAlgorithm,omitempty" tf:"custom_encryption_algorithm,omitempty"`

	DhGroup *string `json:"dhGroup,omitempty" tf:"dh_group,omitempty"`

	IsCustomPhaseTwoConfig *bool `json:"isCustomPhaseTwoConfig,omitempty" tf:"is_custom_phase_two_config,omitempty"`

	IsEspEstablished *bool `json:"isEspEstablished,omitempty" tf:"is_esp_established,omitempty"`

	IsPfsEnabled *bool `json:"isPfsEnabled,omitempty" tf:"is_pfs_enabled,omitempty"`

	Lifetime *float64 `json:"lifetime,omitempty" tf:"lifetime,omitempty"`

	NegotiatedAuthenticationAlgorithm *string `json:"negotiatedAuthenticationAlgorithm,omitempty" tf:"negotiated_authentication_algorithm,omitempty"`

	NegotiatedDhGroup *string `json:"negotiatedDhGroup,omitempty" tf:"negotiated_dh_group,omitempty"`

	NegotiatedEncryptionAlgorithm *string `json:"negotiatedEncryptionAlgorithm,omitempty" tf:"negotiated_encryption_algorithm,omitempty"`

	RemainingLifetime *string `json:"remainingLifetime,omitempty" tf:"remaining_lifetime,omitempty"`

	RemainingLifetimeLastRetrieved *string `json:"remainingLifetimeLastRetrieved,omitempty" tf:"remaining_lifetime_last_retrieved,omitempty"`
}

type PhaseTwoDetailsParameters struct {
}

// IpsecConnectionTunnelManagementSpec defines the desired state of IpsecConnectionTunnelManagement
type IpsecConnectionTunnelManagementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpsecConnectionTunnelManagementParameters `json:"forProvider"`
}

// IpsecConnectionTunnelManagementStatus defines the observed state of IpsecConnectionTunnelManagement.
type IpsecConnectionTunnelManagementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpsecConnectionTunnelManagementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpsecConnectionTunnelManagement is the Schema for the IpsecConnectionTunnelManagements API. Provides details about a specific Ip Sec Connection Tunnel in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type IpsecConnectionTunnelManagement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpsecConnectionTunnelManagementSpec   `json:"spec"`
	Status            IpsecConnectionTunnelManagementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpsecConnectionTunnelManagementList contains a list of IpsecConnectionTunnelManagements
type IpsecConnectionTunnelManagementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpsecConnectionTunnelManagement `json:"items"`
}

// Repository type metadata.
var (
	IpsecConnectionTunnelManagement_Kind             = "IpsecConnectionTunnelManagement"
	IpsecConnectionTunnelManagement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpsecConnectionTunnelManagement_Kind}.String()
	IpsecConnectionTunnelManagement_KindAPIVersion   = IpsecConnectionTunnelManagement_Kind + "." + CRDGroupVersion.String()
	IpsecConnectionTunnelManagement_GroupVersionKind = CRDGroupVersion.WithKind(IpsecConnectionTunnelManagement_Kind)
)

func init() {
	SchemeBuilder.Register(&IpsecConnectionTunnelManagement{}, &IpsecConnectionTunnelManagementList{})
}
