/*
Copyright 2022 Upbound Inc.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	v1alpha1 "github.com/oracle/provider-oci/apis/identity/v1alpha1"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this CaptureFilter.
func (mg *CaptureFilter) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Cpe.
func (mg *Cpe) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DHCPOptions.
func (mg *DHCPOptions) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Drg.
func (mg *Drg) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgAttachment.
func (mg *DrgAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgIDRef,
		Selector:     mg.Spec.ForProvider.DrgIDSelector,
		To: reference.To{
			List:    &DrgList{},
			Managed: &Drg{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.DrgRouteTableIDSelector,
		To: reference.To{
			List:    &DrgRouteTableList{},
			Managed: &DrgRouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteTableID")
	}
	mg.Spec.ForProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteTableIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkDetails); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkDetails[i3].ID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkDetails[i3].IDRef,
			Selector:     mg.Spec.ForProvider.NetworkDetails[i3].IDSelector,
			To: reference.To{
				List:    &VcnList{},
				Managed: &Vcn{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkDetails[i3].ID")
		}
		mg.Spec.ForProvider.NetworkDetails[i3].ID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkDetails[i3].IDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.NetworkDetails); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkDetails[i3].RouteTableID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.NetworkDetails[i3].RouteTableIDRef,
			Selector:     mg.Spec.ForProvider.NetworkDetails[i3].RouteTableIDSelector,
			To: reference.To{
				List:    &RouteTableList{},
				Managed: &RouteTable{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.NetworkDetails[i3].RouteTableID")
		}
		mg.Spec.ForProvider.NetworkDetails[i3].RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.NetworkDetails[i3].RouteTableIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this DrgAttachmentManagement.
func (mg *DrgAttachmentManagement) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgIDRef,
		Selector:     mg.Spec.ForProvider.DrgIDSelector,
		To: reference.To{
			List:    &DrgList{},
			Managed: &Drg{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.DrgRouteTableIDSelector,
		To: reference.To{
			List:    &DrgRouteTableList{},
			Managed: &DrgRouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteTableID")
	}
	mg.Spec.ForProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkIDRef,
		Selector:     mg.Spec.ForProvider.NetworkIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkID")
	}
	mg.Spec.ForProvider.NetworkID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgAttachmentsList.
func (mg *DrgAttachmentsList) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgIDRef,
		Selector:     mg.Spec.ForProvider.DrgIDSelector,
		To: reference.To{
			List:    &DrgList{},
			Managed: &Drg{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteDistribution.
func (mg *DrgRouteDistribution) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgIDRef,
		Selector:     mg.Spec.ForProvider.DrgIDSelector,
		To: reference.To{
			List:    &DrgList{},
			Managed: &Drg{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteDistributionStatement.
func (mg *DrgRouteDistributionStatement) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteDistributionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgRouteDistributionIDRef,
		Selector:     mg.Spec.ForProvider.DrgRouteDistributionIDSelector,
		To: reference.To{
			List:    &DrgRouteDistributionList{},
			Managed: &DrgRouteDistribution{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteDistributionID")
	}
	mg.Spec.ForProvider.DrgRouteDistributionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteDistributionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteTable.
func (mg *DrgRouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgIDRef,
		Selector:     mg.Spec.ForProvider.DrgIDSelector,
		To: reference.To{
			List:    &DrgList{},
			Managed: &Drg{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ImportDrgRouteDistributionID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.ImportDrgRouteDistributionIDRef,
		Selector:     mg.Spec.ForProvider.ImportDrgRouteDistributionIDSelector,
		To: reference.To{
			List:    &DrgRouteDistributionList{},
			Managed: &DrgRouteDistribution{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.ImportDrgRouteDistributionID")
	}
	mg.Spec.ForProvider.ImportDrgRouteDistributionID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.ImportDrgRouteDistributionIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this DrgRouteTableRouteRule.
func (mg *DrgRouteTableRouteRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgRouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgRouteTableIDRef,
		Selector:     mg.Spec.ForProvider.DrgRouteTableIDSelector,
		To: reference.To{
			List:    &DrgRouteTableList{},
			Managed: &DrgRouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgRouteTableID")
	}
	mg.Spec.ForProvider.DrgRouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgRouteTableIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NextHopDrgAttachmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NextHopDrgAttachmentIDRef,
		Selector:     mg.Spec.ForProvider.NextHopDrgAttachmentIDSelector,
		To: reference.To{
			List:    &DrgAttachmentList{},
			Managed: &DrgAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NextHopDrgAttachmentID")
	}
	mg.Spec.ForProvider.NextHopDrgAttachmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NextHopDrgAttachmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Instance.
func (mg *Instance) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.CreateVnicDetails); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIdsRefs,
			Selector:      mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIdsSelector,
			To: reference.To{
				List:    &NetworkSecurityGroupList{},
				Managed: &NetworkSecurityGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIds")
		}
		mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.CreateVnicDetails[i3].NsgIdsRefs = mrsp.ResolvedReferences

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.CreateVnicDetails); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetIDRef,
			Selector:     mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetIDSelector,
			To: reference.To{
				List:    &SubnetList{},
				Managed: &Subnet{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetID")
		}
		mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CreateVnicDetails[i3].SubnetIDRef = rsp.ResolvedReference

	}
	for i3 := 0; i3 < len(mg.Spec.ForProvider.CreateVnicDetails); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CreateVnicDetails[i3].VlanID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CreateVnicDetails[i3].VlanIDRef,
			Selector:     mg.Spec.ForProvider.CreateVnicDetails[i3].VlanIDSelector,
			To: reference.To{
				List:    &VlanList{},
				Managed: &Vlan{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CreateVnicDetails[i3].VlanID")
		}
		mg.Spec.ForProvider.CreateVnicDetails[i3].VlanID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CreateVnicDetails[i3].VlanIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DedicatedVMHostID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DedicatedVMHostIDRef,
		Selector:     mg.Spec.ForProvider.DedicatedVMHostIDSelector,
		To: reference.To{
			List:    &DedicatedVMHostList{},
			Managed: &DedicatedVMHost{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DedicatedVMHostID")
	}
	mg.Spec.ForProvider.DedicatedVMHostID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DedicatedVMHostIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.SourceDetails); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.SourceDetails[i3].SourceID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.SourceDetails[i3].SourceIDRef,
			Selector:     mg.Spec.ForProvider.SourceDetails[i3].SourceIDSelector,
			To: reference.To{
				List:    &ImageList{},
				Managed: &Image{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SourceDetails[i3].SourceID")
		}
		mg.Spec.ForProvider.SourceDetails[i3].SourceID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.SourceDetails[i3].SourceIDRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this InstanceConfiguration.
func (mg *InstanceConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this InternetGateway.
func (mg *InternetGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Ipsec.
func (mg *Ipsec) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CpeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CpeIDRef,
		Selector:     mg.Spec.ForProvider.CpeIDSelector,
		To: reference.To{
			List:    &CpeList{},
			Managed: &Cpe{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CpeID")
	}
	mg.Spec.ForProvider.CpeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CpeIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgIDRef,
		Selector:     mg.Spec.ForProvider.DrgIDSelector,
		To: reference.To{
			List:    &DrgList{},
			Managed: &Drg{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this LocalPeeringGateway.
func (mg *LocalPeeringGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NATGateway.
func (mg *NATGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkSecurityGroup.
func (mg *NetworkSecurityGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this NetworkSecurityGroupSecurityRule.
func (mg *NetworkSecurityGroupSecurityRule) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NetworkSecurityGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.NetworkSecurityGroupIDRef,
		Selector:     mg.Spec.ForProvider.NetworkSecurityGroupIDSelector,
		To: reference.To{
			List:    &NetworkSecurityGroupList{},
			Managed: &NetworkSecurityGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.NetworkSecurityGroupID")
	}
	mg.Spec.ForProvider.NetworkSecurityGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.NetworkSecurityGroupIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PrivateIP.
func (mg *PrivateIP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VlanID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VlanIDRef,
		Selector:     mg.Spec.ForProvider.VlanIDSelector,
		To: reference.To{
			List:    &VlanList{},
			Managed: &Vlan{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VlanID")
	}
	mg.Spec.ForProvider.VlanID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VlanIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VnicID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VnicIDRef,
		Selector:     mg.Spec.ForProvider.VnicIDSelector,
		To: reference.To{
			List:    &VnicAttachmentList{},
			Managed: &VnicAttachment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VnicID")
	}
	mg.Spec.ForProvider.VnicID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VnicIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PublicIP.
func (mg *PublicIP) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PrivateIPID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PrivateIPIDRef,
		Selector:     mg.Spec.ForProvider.PrivateIPIDSelector,
		To: reference.To{
			List:    &PrivateIPList{},
			Managed: &PrivateIP{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PrivateIPID")
	}
	mg.Spec.ForProvider.PrivateIPID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PrivateIPIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PublicIPPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PublicIPPoolIDRef,
		Selector:     mg.Spec.ForProvider.PublicIPPoolIDSelector,
		To: reference.To{
			List:    &PublicIPPoolList{},
			Managed: &PublicIPPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PublicIPPoolID")
	}
	mg.Spec.ForProvider.PublicIPPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PublicIPPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PublicIPPool.
func (mg *PublicIPPool) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this PublicIPPoolCapacity.
func (mg *PublicIPPoolCapacity) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PublicIPPoolID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PublicIPPoolIDRef,
		Selector:     mg.Spec.ForProvider.PublicIPPoolIDSelector,
		To: reference.To{
			List:    &PublicIPPoolList{},
			Managed: &PublicIPPool{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PublicIPPoolID")
	}
	mg.Spec.ForProvider.PublicIPPoolID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PublicIPPoolIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RemotePeeringConnection.
func (mg *RemotePeeringConnection) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DrgID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DrgIDRef,
		Selector:     mg.Spec.ForProvider.DrgIDSelector,
		To: reference.To{
			List:    &DrgList{},
			Managed: &Drg{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DrgID")
	}
	mg.Spec.ForProvider.DrgID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DrgIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this RouteTable.
func (mg *RouteTable) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.RouteRules); i3++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteRules[i3].NetworkEntityID),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.RouteRules[i3].NetworkEntityIDRef,
			Selector:     mg.Spec.ForProvider.RouteRules[i3].NetworkEntityIDSelector,
			To: reference.To{
				List:    &NATGatewayList{},
				Managed: &NATGateway{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.RouteRules[i3].NetworkEntityID")
		}
		mg.Spec.ForProvider.RouteRules[i3].NetworkEntityID = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.RouteRules[i3].NetworkEntityIDRef = rsp.ResolvedReference

	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityList.
func (mg *SecurityList) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this ServiceGateway.
func (mg *ServiceGateway) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Subnet.
func (mg *Subnet) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.DHCPOptionsID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.DHCPOptionsIDRef,
		Selector:     mg.Spec.ForProvider.DHCPOptionsIDSelector,
		To: reference.To{
			List:    &DHCPOptionsList{},
			Managed: &DHCPOptions{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.DHCPOptionsID")
	}
	mg.Spec.ForProvider.DHCPOptionsID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.DHCPOptionsIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.RouteTableID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.RouteTableIDRef,
		Selector:     mg.Spec.ForProvider.RouteTableIDSelector,
		To: reference.To{
			List:    &RouteTableList{},
			Managed: &RouteTable{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.RouteTableID")
	}
	mg.Spec.ForProvider.RouteTableID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.RouteTableIDRef = rsp.ResolvedReference

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SecurityListIds),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.SecurityListIDRefs,
		Selector:      mg.Spec.ForProvider.SecurityListIDSelector,
		To: reference.To{
			List:    &SecurityListList{},
			Managed: &SecurityList{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.SecurityListIds")
	}
	mg.Spec.ForProvider.SecurityListIds = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.SecurityListIDRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Vcn.
func (mg *Vcn) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Vlan.
func (mg *Vlan) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VcnID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VcnIDRef,
		Selector:     mg.Spec.ForProvider.VcnIDSelector,
		To: reference.To{
			List:    &VcnList{},
			Managed: &Vcn{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VcnID")
	}
	mg.Spec.ForProvider.VcnID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VcnIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VnicAttachment.
func (mg *VnicAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this Volume.
func (mg *Volume) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VolumeAttachment.
func (mg *VolumeAttachment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.InstanceID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.InstanceIDRef,
		Selector:     mg.Spec.ForProvider.InstanceIDSelector,
		To: reference.To{
			List:    &InstanceList{},
			Managed: &Instance{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.InstanceID")
	}
	mg.Spec.ForProvider.InstanceID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.InstanceIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VolumeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VolumeIDRef,
		Selector:     mg.Spec.ForProvider.VolumeIDSelector,
		To: reference.To{
			List:    &VolumeList{},
			Managed: &Volume{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VolumeID")
	}
	mg.Spec.ForProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VolumeBackup.
func (mg *VolumeBackup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VolumeID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VolumeIDRef,
		Selector:     mg.Spec.ForProvider.VolumeIDSelector,
		To: reference.To{
			List:    &VolumeList{},
			Managed: &Volume{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VolumeID")
	}
	mg.Spec.ForProvider.VolumeID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VolumeBackupPolicy.
func (mg *VolumeBackupPolicy) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VolumeBackupPolicyAssignment.
func (mg *VolumeBackupPolicyAssignment) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.AssetID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.AssetIDRef,
		Selector:     mg.Spec.ForProvider.AssetIDSelector,
		To: reference.To{
			List:    &VolumeList{},
			Managed: &Volume{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.AssetID")
	}
	mg.Spec.ForProvider.AssetID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.AssetIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.PolicyID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.PolicyIDRef,
		Selector:     mg.Spec.ForProvider.PolicyIDSelector,
		To: reference.To{
			List:    &VolumeBackupPolicyList{},
			Managed: &VolumeBackupPolicy{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.PolicyID")
	}
	mg.Spec.ForProvider.PolicyID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.PolicyIDRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this VolumeGroup.
func (mg *VolumeGroup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	for i3 := 0; i3 < len(mg.Spec.ForProvider.SourceDetails); i3++ {
		mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
			CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.SourceDetails[i3].VolumeIds),
			Extract:       reference.ExternalName(),
			References:    mg.Spec.ForProvider.SourceDetails[i3].VolumeIdsRefs,
			Selector:      mg.Spec.ForProvider.SourceDetails[i3].VolumeIdsSelector,
			To: reference.To{
				List:    &VolumeList{},
				Managed: &Volume{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.SourceDetails[i3].VolumeIds")
		}
		mg.Spec.ForProvider.SourceDetails[i3].VolumeIds = reference.ToPtrValues(mrsp.ResolvedValues)
		mg.Spec.ForProvider.SourceDetails[i3].VolumeIdsRefs = mrsp.ResolvedReferences

	}

	return nil
}

// ResolveReferences of this VolumeGroupBackup.
func (mg *VolumeGroupBackup) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CompartmentID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CompartmentIDRef,
		Selector:     mg.Spec.ForProvider.CompartmentIDSelector,
		To: reference.To{
			List:    &v1alpha1.CompartmentList{},
			Managed: &v1alpha1.Compartment{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CompartmentID")
	}
	mg.Spec.ForProvider.CompartmentID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CompartmentIDRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.VolumeGroupID),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.VolumeGroupIDRef,
		Selector:     mg.Spec.ForProvider.VolumeGroupIDSelector,
		To: reference.To{
			List:    &VolumeGroupList{},
			Managed: &VolumeGroup{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.VolumeGroupID")
	}
	mg.Spec.ForProvider.VolumeGroupID = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.VolumeGroupIDRef = rsp.ResolvedReference

	return nil
}
