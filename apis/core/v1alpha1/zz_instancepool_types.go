/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InstancePoolLoadBalancersObservation struct {

	// The OCID of the instance pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The OCID of the instance pool of the load balancer attachment.
	InstancePoolID *string `json:"instancePoolId,omitempty" tf:"instance_pool_id,omitempty"`

	// (Updatable) The target state for the instance pool update operation (ignored at create time and should not be set). Could be set to RUNNING or STOPPED.
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type InstancePoolLoadBalancersParameters struct {

	// The name of the backend set on the load balancer to add instances to.
	// +kubebuilder:validation:Required
	BackendSetName *string `json:"backendSetName" tf:"backend_set_name,omitempty"`

	// The OCID of the load balancer to attach to the instance pool.
	// +kubebuilder:validation:Required
	LoadBalancerID *string `json:"loadBalancerId" tf:"load_balancer_id,omitempty"`

	// The port value to use when creating the backend set.
	// +kubebuilder:validation:Required
	Port *float64 `json:"port" tf:"port,omitempty"`

	// Indicates which VNIC on each instance in the pool should be used to associate with the load balancer. Possible values are "PrimaryVnic" or the displayName of one of the secondary VNICs on the instance configuration that is associated with the instance pool.
	// +kubebuilder:validation:Required
	VnicSelection *string `json:"vnicSelection" tf:"vnic_selection,omitempty"`
}

type InstancePoolObservation struct {

	// The number of actual instances in the instance pool on the cloud. This attribute will be different when instance pool is used along with autoScaling Configuration.
	ActualSize *float64 `json:"actualSize,omitempty" tf:"actual_size,omitempty"`

	// The OCID of the instance pool.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The load balancers to attach to the instance pool.
	// +kubebuilder:validation:Optional
	LoadBalancers []InstancePoolLoadBalancersObservation `json:"loadBalancers,omitempty" tf:"load_balancers,omitempty"`

	// The date and time the instance pool was created, in the format defined by RFC3339. Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type InstancePoolParameters struct {

	// (Updatable) The OCID of the compartment containing the instance pool.
	// +kubebuilder:validation:Required
	CompartmentID *string `json:"compartmentId" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`

	// (Updatable) The OCID of the instance configuration associated with the instance pool.
	// +kubebuilder:validation:Required
	InstanceConfigurationID *string `json:"instanceConfigurationId" tf:"instance_configuration_id,omitempty"`

	// The load balancers to attach to the instance pool.
	// +kubebuilder:validation:Optional
	LoadBalancers []InstancePoolLoadBalancersParameters `json:"loadBalancers,omitempty" tf:"load_balancers,omitempty"`

	// (Updatable) The placement configurations for the instance pool. Provide one placement configuration for each availability domain.
	// +kubebuilder:validation:Required
	PlacementConfigurations []InstancePoolPlacementConfigurationsParameters `json:"placementConfigurations" tf:"placement_configurations,omitempty"`

	// (Updatable) The number of instances that should be in the instance pool. Modifying this value will override the size of the instance pool. If the instance pool is linked with autoscaling configuration, autoscaling configuration could resize the instance pool at a later point. The instance pool's actual size may differ from the configured size if it is associated with an autoscaling configuration, instance pool's actual size will be reflected in this size attribute.
	// +kubebuilder:validation:Required
	Size *float64 `json:"size" tf:"size,omitempty"`

	// (Updatable) The target state for the instance pool update operation (ignored at create time and should not be set). Could be set to RUNNING or STOPPED.
	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type InstancePoolPlacementConfigurationsObservation struct {
}

type InstancePoolPlacementConfigurationsParameters struct {

	// (Updatable) The availability domain to place instances.  Example: Uocm:PHX-AD-1
	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// (Updatable) The fault domains to place instances.
	// +kubebuilder:validation:Optional
	FaultDomains []*string `json:"faultDomains,omitempty" tf:"fault_domains,omitempty"`

	// (Updatable) The OCID of the primary subnet to place instances.
	// +kubebuilder:validation:Required
	PrimarySubnetID *string `json:"primarySubnetId" tf:"primary_subnet_id,omitempty"`

	// (Updatable) The set of secondary VNIC data for instances in the pool.
	// +kubebuilder:validation:Optional
	SecondaryVnicSubnets []PlacementConfigurationsSecondaryVnicSubnetsParameters `json:"secondaryVnicSubnets,omitempty" tf:"secondary_vnic_subnets,omitempty"`
}

type PlacementConfigurationsSecondaryVnicSubnetsObservation struct {
}

type PlacementConfigurationsSecondaryVnicSubnetsParameters struct {

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) The subnet OCID for the secondary VNIC.
	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

// InstancePoolSpec defines the desired state of InstancePool
type InstancePoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InstancePoolParameters `json:"forProvider"`
}

// InstancePoolStatus defines the observed state of InstancePool.
type InstancePoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InstancePoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InstancePool is the Schema for the InstancePools API. Provides the Instance Pool resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type InstancePool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InstancePoolSpec   `json:"spec"`
	Status            InstancePoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InstancePoolList contains a list of InstancePools
type InstancePoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InstancePool `json:"items"`
}

// Repository type metadata.
var (
	InstancePool_Kind             = "InstancePool"
	InstancePool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InstancePool_Kind}.String()
	InstancePool_KindAPIVersion   = InstancePool_Kind + "." + CRDGroupVersion.String()
	InstancePool_GroupVersionKind = CRDGroupVersion.WithKind(InstancePool_Kind)
)

func init() {
	SchemeBuilder.Register(&InstancePool{}, &InstancePoolList{})
}
