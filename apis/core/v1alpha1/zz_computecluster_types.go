/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ComputeClusterObservation struct {

	// The OCID of this compute cluster.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The current state of the compute cluster.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the compute cluster was created, in the format defined by RFC3339. Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type ComputeClusterParameters struct {

	// The availability domain that the compute cluster is running in. Example: Uocm:PHX-AD-1
	// +kubebuilder:validation:Required
	AvailabilityDomain *string `json:"availabilityDomain" tf:"availability_domain,omitempty"`

	// (Updatable) The OCID of the compartment that contains this compute cluster.
	// +kubebuilder:validation:Required
	CompartmentID *string `json:"compartmentId" tf:"compartment_id,omitempty"`

	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see Resource Tags.  Example: {"Operations.CostCenter": "42"}
	// +kubebuilder:validation:Optional
	DefinedTags map[string]*string `json:"definedTags,omitempty" tf:"defined_tags,omitempty"`

	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see Resource Tags.  Example: {"Department": "Finance"}
	// +kubebuilder:validation:Optional
	FreeformTags map[string]*string `json:"freeformTags,omitempty" tf:"freeform_tags,omitempty"`
}

// ComputeClusterSpec defines the desired state of ComputeCluster
type ComputeClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ComputeClusterParameters `json:"forProvider"`
}

// ComputeClusterStatus defines the observed state of ComputeCluster.
type ComputeClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ComputeClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeCluster is the Schema for the ComputeClusters API. Provides the Compute Cluster resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type ComputeCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ComputeClusterSpec   `json:"spec"`
	Status            ComputeClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ComputeClusterList contains a list of ComputeClusters
type ComputeClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ComputeCluster `json:"items"`
}

// Repository type metadata.
var (
	ComputeCluster_Kind             = "ComputeCluster"
	ComputeCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ComputeCluster_Kind}.String()
	ComputeCluster_KindAPIVersion   = ComputeCluster_Kind + "." + CRDGroupVersion.String()
	ComputeCluster_GroupVersionKind = CRDGroupVersion.WithKind(ComputeCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&ComputeCluster{}, &ComputeClusterList{})
}
