/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MultipathDevicesInitParameters struct {
}

type MultipathDevicesObservation struct {

	// The volume's iSCSI IP address.  Example: 169.254.0.2
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// The target volume's iSCSI Qualified Name in the format defined by RFC 3720.  Example: iqn.2015-12.us.oracle.com:<CHAP_username>
	Iqn *string `json:"iqn,omitempty" tf:"iqn,omitempty"`

	// The volume's iSCSI port, usually port 860 or 3260.  Example: 3260
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`
}

type MultipathDevicesParameters struct {
}

type VolumeAttachmentInitParameters struct {

	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	AttachmentType *string `json:"attachmentType,omitempty" tf:"attachment_type,omitempty"`

	// The OCID of the compartment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The device name. To retrieve a list of devices for a given instance, see ListInstanceDevices.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Applicable when attachment_type=iscsi) Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	EncryptionInTransitType *string `json:"encryptionInTransitType,omitempty" tf:"encryption_in_transit_type,omitempty"`

	// The OCID of the instance.
	// +crossplane:generate:reference:type=Instance
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// (Applicable when attachment_type=iscsi) Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	IsAgentAutoISCSILoginEnabled *bool `json:"isAgentAutoIscsiLoginEnabled,omitempty" tf:"is_agent_auto_iscsi_login_enabled,omitempty"`

	// (Applicable when attachment_type=paravirtualized) Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// Whether the attachment was created in read-only mode.
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	IsShareable *bool `json:"isShareable,omitempty" tf:"is_shareable,omitempty"`

	// (Applicable when attachment_type=iscsi) Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap *bool `json:"useChap,omitempty" tf:"use_chap,omitempty"`

	// The OCID of the volume.
	// +crossplane:generate:reference:type=Volume
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Reference to a Volume to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// Selector for a Volume to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

type VolumeAttachmentObservation struct {

	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	AttachmentType *string `json:"attachmentType,omitempty" tf:"attachment_type,omitempty"`

	// The availability domain of an instance.  Example: Uocm:PHX-AD-1
	AvailabilityDomain *string `json:"availabilityDomain,omitempty" tf:"availability_domain,omitempty"`

	// The Challenge-Handshake-Authentication-Protocol (CHAP) secret valid for the associated CHAP user name. (Also called the "CHAP password".)
	ChapSecret *string `json:"chapSecret,omitempty" tf:"chap_secret,omitempty"`

	// The volume's system-generated Challenge-Handshake-Authentication-Protocol (CHAP) user name. See RFC 1994 for more on CHAP.  Example: ocid1.volume.oc1.phx.<unique_ID>
	ChapUsername *string `json:"chapUsername,omitempty" tf:"chap_username,omitempty"`

	// The OCID of the compartment.
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The device name. To retrieve a list of devices for a given instance, see ListInstanceDevices.
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Applicable when attachment_type=iscsi) Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	EncryptionInTransitType *string `json:"encryptionInTransitType,omitempty" tf:"encryption_in_transit_type,omitempty"`

	// The OCID of the volume attachment.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The volume's iSCSI IP address.  Example: 169.254.0.2
	IPv4 *string `json:"ipv4,omitempty" tf:"ipv4,omitempty"`

	// The iscsi login state of the volume attachment. For a Iscsi volume attachment, all iscsi sessions need to be all logged-in or logged-out to be in logged-in or logged-out state.
	ISCSILoginState *string `json:"iscsiLoginState,omitempty" tf:"iscsi_login_state,omitempty"`

	// The OCID of the instance.
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// The target volume's iSCSI Qualified Name in the format defined by RFC 3720.  Example: iqn.2015-12.us.oracle.com:<CHAP_username>
	Iqn *string `json:"iqn,omitempty" tf:"iqn,omitempty"`

	// (Applicable when attachment_type=iscsi) Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	IsAgentAutoISCSILoginEnabled *bool `json:"isAgentAutoIscsiLoginEnabled,omitempty" tf:"is_agent_auto_iscsi_login_enabled,omitempty"`

	// Whether the Iscsi or Paravirtualized attachment is multipath or not, it is not applicable to NVMe attachment.
	IsMultipath *bool `json:"isMultipath,omitempty" tf:"is_multipath,omitempty"`

	// (Applicable when attachment_type=paravirtualized) Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// Whether the attachment was created in read-only mode.
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	IsShareable *bool `json:"isShareable,omitempty" tf:"is_shareable,omitempty"`

	// Flag indicating if this volume was created for the customer as part of a simplified launch. Used to determine whether the volume requires deletion on instance termination.
	IsVolumeCreatedDuringLaunch *bool `json:"isVolumeCreatedDuringLaunch,omitempty" tf:"is_volume_created_during_launch,omitempty"`

	// A list of secondary multipath devices
	MultipathDevices []MultipathDevicesObservation `json:"multipathDevices,omitempty" tf:"multipath_devices,omitempty"`

	// The volume's iSCSI port, usually port 860 or 3260.  Example: 3260
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// The current state of the volume attachment.
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// The date and time the volume was created, in the format defined by RFC3339.  Example: 2016-08-25T21:10:29.600Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`

	// (Applicable when attachment_type=iscsi) Whether to use CHAP authentication for the volume attachment. Defaults to false.
	UseChap *bool `json:"useChap,omitempty" tf:"use_chap,omitempty"`

	// The OCID of the volume.
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`
}

type VolumeAttachmentParameters struct {

	// The type of volume. The only supported values are "iscsi" and "paravirtualized".
	// +kubebuilder:validation:Optional
	AttachmentType *string `json:"attachmentType,omitempty" tf:"attachment_type,omitempty"`

	// The OCID of the compartment.
	// +kubebuilder:validation:Optional
	CompartmentID *string `json:"compartmentId,omitempty" tf:"compartment_id,omitempty"`

	// The device name. To retrieve a list of devices for a given instance, see ListInstanceDevices.
	// +kubebuilder:validation:Optional
	Device *string `json:"device,omitempty" tf:"device,omitempty"`

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// (Applicable when attachment_type=iscsi) Refer the top-level definition of encryptionInTransitType. The default value is NONE.
	// +kubebuilder:validation:Optional
	EncryptionInTransitType *string `json:"encryptionInTransitType,omitempty" tf:"encryption_in_transit_type,omitempty"`

	// The OCID of the instance.
	// +crossplane:generate:reference:type=Instance
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Reference to a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDRef *v1.Reference `json:"instanceIdRef,omitempty" tf:"-"`

	// Selector for a Instance to populate instanceId.
	// +kubebuilder:validation:Optional
	InstanceIDSelector *v1.Selector `json:"instanceIdSelector,omitempty" tf:"-"`

	// (Applicable when attachment_type=iscsi) Whether to enable Oracle Cloud Agent to perform the iSCSI login and logout commands after the volume attach or detach operations for non multipath-enabled iSCSI attachments.
	// +kubebuilder:validation:Optional
	IsAgentAutoISCSILoginEnabled *bool `json:"isAgentAutoIscsiLoginEnabled,omitempty" tf:"is_agent_auto_iscsi_login_enabled,omitempty"`

	// (Applicable when attachment_type=paravirtualized) Whether to enable in-transit encryption for the data volume's paravirtualized attachment. The default value is false.
	// +kubebuilder:validation:Optional
	IsPvEncryptionInTransitEnabled *bool `json:"isPvEncryptionInTransitEnabled,omitempty" tf:"is_pv_encryption_in_transit_enabled,omitempty"`

	// Whether the attachment was created in read-only mode.
	// +kubebuilder:validation:Optional
	IsReadOnly *bool `json:"isReadOnly,omitempty" tf:"is_read_only,omitempty"`

	// Whether the attachment should be created in shareable mode. If an attachment is created in shareable mode, then other instances can attach the same volume, provided that they also create their attachments in shareable mode. Only certain volume types can be attached in shareable mode. Defaults to false if not specified.
	// +kubebuilder:validation:Optional
	IsShareable *bool `json:"isShareable,omitempty" tf:"is_shareable,omitempty"`

	// (Applicable when attachment_type=iscsi) Whether to use CHAP authentication for the volume attachment. Defaults to false.
	// +kubebuilder:validation:Optional
	UseChap *bool `json:"useChap,omitempty" tf:"use_chap,omitempty"`

	// The OCID of the volume.
	// +crossplane:generate:reference:type=Volume
	// +kubebuilder:validation:Optional
	VolumeID *string `json:"volumeId,omitempty" tf:"volume_id,omitempty"`

	// Reference to a Volume to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDRef *v1.Reference `json:"volumeIdRef,omitempty" tf:"-"`

	// Selector for a Volume to populate volumeId.
	// +kubebuilder:validation:Optional
	VolumeIDSelector *v1.Selector `json:"volumeIdSelector,omitempty" tf:"-"`
}

// VolumeAttachmentSpec defines the desired state of VolumeAttachment
type VolumeAttachmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VolumeAttachmentParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VolumeAttachmentInitParameters `json:"initProvider,omitempty"`
}

// VolumeAttachmentStatus defines the observed state of VolumeAttachment.
type VolumeAttachmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VolumeAttachmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// VolumeAttachment is the Schema for the VolumeAttachments API. Provides the Volume Attachment resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type VolumeAttachment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.attachmentType) || (has(self.initProvider) && has(self.initProvider.attachmentType))",message="spec.forProvider.attachmentType is a required parameter"
	Spec   VolumeAttachmentSpec   `json:"spec"`
	Status VolumeAttachmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeAttachmentList contains a list of VolumeAttachments
type VolumeAttachmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VolumeAttachment `json:"items"`
}

// Repository type metadata.
var (
	VolumeAttachment_Kind             = "VolumeAttachment"
	VolumeAttachment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeAttachment_Kind}.String()
	VolumeAttachment_KindAPIVersion   = VolumeAttachment_Kind + "." + CRDGroupVersion.String()
	VolumeAttachment_GroupVersionKind = CRDGroupVersion.WithKind(VolumeAttachment_Kind)
)

func init() {
	SchemeBuilder.Register(&VolumeAttachment{}, &VolumeAttachmentList{})
}
