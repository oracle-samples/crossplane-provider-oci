/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AppCatalogSubscriptionObservation struct {

	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Listing resource id.
	ListingResourceID *string `json:"listingResourceId,omitempty" tf:"listing_resource_id,omitempty"`

	// Name of the publisher who published this listing.
	PublisherName *string `json:"publisherName,omitempty" tf:"publisher_name,omitempty"`

	// The short summary to the listing.
	Summary *string `json:"summary,omitempty" tf:"summary,omitempty"`

	// Date and time at which the subscription was created, in RFC3339 format. Example: 2018-03-20T12:32:53.532Z
	TimeCreated *string `json:"timeCreated,omitempty" tf:"time_created,omitempty"`
}

type AppCatalogSubscriptionParameters struct {

	// The compartmentID for the subscription.
	// +kubebuilder:validation:Required
	CompartmentID *string `json:"compartmentId" tf:"compartment_id,omitempty"`

	// EULA link
	// +kubebuilder:validation:Optional
	EulaLink *string `json:"eulaLink,omitempty" tf:"eula_link,omitempty"`

	// The OCID of the listing.
	// +kubebuilder:validation:Required
	ListingID *string `json:"listingId" tf:"listing_id,omitempty"`

	// Listing resource version.
	// +kubebuilder:validation:Required
	ListingResourceVersion *string `json:"listingResourceVersion" tf:"listing_resource_version,omitempty"`

	// Oracle TOU link
	// +kubebuilder:validation:Required
	OracleTermsOfUseLink *string `json:"oracleTermsOfUseLink" tf:"oracle_terms_of_use_link,omitempty"`

	// A generated signature for this listing resource version retrieved the agreements API.
	// +kubebuilder:validation:Required
	Signature *string `json:"signature" tf:"signature,omitempty"`

	// Date and time the agreements were retrieved, in RFC3339 format. Example: 2018-03-20T12:32:53.532Z
	// +kubebuilder:validation:Required
	TimeRetrieved *string `json:"timeRetrieved" tf:"time_retrieved,omitempty"`
}

// AppCatalogSubscriptionSpec defines the desired state of AppCatalogSubscription
type AppCatalogSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AppCatalogSubscriptionParameters `json:"forProvider"`
}

// AppCatalogSubscriptionStatus defines the observed state of AppCatalogSubscription.
type AppCatalogSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AppCatalogSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AppCatalogSubscription is the Schema for the AppCatalogSubscriptions API. Provides the App Catalog Subscription resource in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type AppCatalogSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppCatalogSubscriptionSpec   `json:"spec"`
	Status            AppCatalogSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppCatalogSubscriptionList contains a list of AppCatalogSubscriptions
type AppCatalogSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AppCatalogSubscription `json:"items"`
}

// Repository type metadata.
var (
	AppCatalogSubscription_Kind             = "AppCatalogSubscription"
	AppCatalogSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AppCatalogSubscription_Kind}.String()
	AppCatalogSubscription_KindAPIVersion   = AppCatalogSubscription_Kind + "." + CRDGroupVersion.String()
	AppCatalogSubscription_GroupVersionKind = CRDGroupVersion.WithKind(AppCatalogSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&AppCatalogSubscription{}, &AppCatalogSubscriptionList{})
}
