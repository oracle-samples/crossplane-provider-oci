/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ShapeManagementObservation struct {

	// The image's Oracle ID (OCID).
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ShapeManagementParameters struct {

	// The OCID of the compartment containing the image.
	// +kubebuilder:validation:Required
	CompartmentID *string `json:"compartmentId" tf:"compartment_id,omitempty"`

	// The OCID of the Image to which the shape should be added.
	// +kubebuilder:validation:Required
	ImageID *string `json:"imageId" tf:"image_id,omitempty"`

	// The compatible shape that is to be added to the compatible shapes list for the image.
	// +kubebuilder:validation:Required
	ShapeName *string `json:"shapeName" tf:"shape_name,omitempty"`
}

// ShapeManagementSpec defines the desired state of ShapeManagement
type ShapeManagementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShapeManagementParameters `json:"forProvider"`
}

// ShapeManagementStatus defines the observed state of ShapeManagement.
type ShapeManagementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShapeManagementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShapeManagement is the Schema for the ShapeManagements API. Provides details about a specific Shape in Oracle Cloud Infrastructure Core service
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,oci}
type ShapeManagement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShapeManagementSpec   `json:"spec"`
	Status            ShapeManagementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShapeManagementList contains a list of ShapeManagements
type ShapeManagementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShapeManagement `json:"items"`
}

// Repository type metadata.
var (
	ShapeManagement_Kind             = "ShapeManagement"
	ShapeManagement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShapeManagement_Kind}.String()
	ShapeManagement_KindAPIVersion   = ShapeManagement_Kind + "." + CRDGroupVersion.String()
	ShapeManagement_GroupVersionKind = CRDGroupVersion.WithKind(ShapeManagement_Kind)
)

func init() {
	SchemeBuilder.Register(&ShapeManagement{}, &ShapeManagementList{})
}
