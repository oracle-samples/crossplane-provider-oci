---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.18.0
  name: backendsets.networkloadbalancer.oci.upbound.io
spec:
  group: networkloadbalancer.oci.upbound.io
  names:
    categories:
    - crossplane
    - managed
    - oci
    kind: BackendSet
    listKind: BackendSetList
    plural: backendsets
    singular: backendset
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: AGE
      type: date
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: BackendSet is the Schema for the BackendSets API. Provides the
          Backend Set resource in Oracle Cloud Infrastructure Network Load Balancer
          service
        properties:
          apiVersion:
            description: |-
              APIVersion defines the versioned schema of this representation of an object.
              Servers should convert recognized schemas to the latest internal value, and
              may reject unrecognized values.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
            type: string
          kind:
            description: |-
              Kind is a string value representing the REST resource this object represents.
              Servers may infer this from the endpoint the client submits requests to.
              Cannot be updated.
              In CamelCase.
              More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
            type: string
          metadata:
            type: object
          spec:
            description: BackendSetSpec defines the desired state of BackendSet
            properties:
              deletionPolicy:
                default: Delete
                description: |-
                  DeletionPolicy specifies what will happen to the underlying external
                  when this managed resource is deleted - either "Delete" or "Orphan" the
                  external resource.
                  This field is planned to be deprecated in favor of the ManagementPolicies
                  field in a future release. Currently, both could be set independently and
                  non-default values would be honored if the feature flag is enabled.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                properties:
                  areOperationallyActiveBackendsPreferred:
                    description: (Updatable) If enabled, NLB supports active-standby
                      backends. The standby backend takes over the traffic when the
                      active node fails, and continues to serve the traffic even when
                      the old active node is back healthy.
                    type: boolean
                  healthChecker:
                    description: (Updatable) The health check policy configuration.
                      For more information, see Editing Network Load Balancer Health
                      Check Policies.
                    items:
                      properties:
                        dns:
                          description: (Updatable) DNS healthcheck configurations.
                          items:
                            properties:
                              domainName:
                                description: (Updatable) The absolute fully-qualified
                                  domain name to perform periodic DNS queries. If
                                  not provided, an extra dot will be added at the
                                  end of a domain name during the query.
                                type: string
                              queryClass:
                                description: '(Updatable) The class the dns health
                                  check query to use; either IN or CH.  Example: IN'
                                type: string
                              queryType:
                                description: '(Updatable) The type the dns health
                                  check query to use; A, AAAA, TXT.  Example: A'
                                type: string
                              rcodes:
                                description: '(Updatable) An array that represents
                                  accepetable RCODE values for DNS query response.
                                  Example: ["NOERROR", "NXDOMAIN"]'
                                items:
                                  type: string
                                type: array
                              transportProtocol:
                                description: '(Updatable) DNS transport protocol;
                                  either UDP or TCP.  Example: UDP'
                                type: string
                            type: object
                          type: array
                        intervalInMillis:
                          description: '(Updatable) The interval between health checks,
                            in milliseconds. The default value is 10000 (10 seconds).  Example:
                            10000'
                          type: number
                        port:
                          description: '(Updatable) The communication port for the
                            backend server.  Example: 8080'
                          type: number
                        protocol:
                          description: '(Updatable) The protocol the health check
                            must use; either HTTP, HTTPS, UDP, TCP or DNS.  Example:
                            HTTP'
                          type: string
                        requestData:
                          description: (Updatable) Base64 encoded pattern to be sent
                            as UDP or TCP health check probe.
                          type: string
                        responseBodyRegex:
                          description: '(Updatable) A regular expression for parsing
                            the response body from the backend server.  Example: ^((?!false).|\s)*$'
                          type: string
                        responseData:
                          description: (Updatable) Base64 encoded pattern to be validated
                            as UDP or TCP health check probe response.
                          type: string
                        retries:
                          description: '(Updatable) The number of retries to attempt
                            before a backend server is considered "unhealthy". This
                            number also applies when recovering a server to the "healthy"
                            state. The default value is 3.  Example: 3'
                          type: number
                        returnCode:
                          description: '(Updatable) The status code a healthy backend
                            server should return. If you configure the health check
                            policy to use the HTTP protocol, then you can use common
                            HTTP status codes such as "200".  Example: 200'
                          type: number
                        timeoutInMillis:
                          description: '(Updatable) The maximum time, in milliseconds,
                            to wait for a reply to a health check. A health check
                            is successful only if a reply returns within this timeout
                            period. The default value is 3000 (3 seconds).  Example:
                            3000'
                          type: number
                        urlPath:
                          description: '(Updatable) The path against which to run
                            the health check.  Example: /healthcheck'
                          type: string
                      type: object
                    type: array
                  ipVersion:
                    description: (Updatable) IP version associated with the backend
                      set.
                    type: string
                  isFailOpen:
                    description: (Updatable) If enabled, the network load balancer
                      will continue to distribute traffic in the configured distribution
                      in the event all backends are unhealthy. The value is false
                      by default.
                    type: boolean
                  isInstantFailoverEnabled:
                    description: (Updatable) If enabled existing connections will
                      be forwarded to an alternative healthy backend as soon as current
                      backend becomes unhealthy.
                    type: boolean
                  isInstantFailoverTcpResetEnabled:
                    description: (Updatable) If enabled along with instant failover,
                      the network load balancer will send TCP RST to the clients for
                      the existing connections instead of failing over to a healthy
                      backend. This only applies when using the instant failover.
                      By default, TCP RST is enabled.
                    type: boolean
                  isPreserveSource:
                    description: (Updatable) If this parameter is enabled, then the
                      network load balancer preserves the source IP of the packet
                      when it is forwarded to backends. Backends see the original
                      source IP. If the isPreserveSourceDestination parameter is enabled
                      for the network load balancer resource, then this parameter
                      cannot be disabled. The value is true by default.
                    type: boolean
                  name:
                    description: '(Updatable) A read-only field showing the IP address/OCID
                      and port that uniquely identify this backend server in the backend
                      set.  Example: 10.0.0.3:8080, or ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>:443
                      or 10.0.0.3:0'
                    type: string
                  networkLoadBalancerId:
                    description: The OCID of the network load balancer to update.
                    type: string
                  networkLoadBalancerIdRef:
                    description: Reference to a NetworkLoadBalancer in networkloadbalancer
                      to populate networkLoadBalancerId.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  networkLoadBalancerIdSelector:
                    description: Selector for a NetworkLoadBalancer in networkloadbalancer
                      to populate networkLoadBalancerId.
                    properties:
                      matchControllerRef:
                        description: |-
                          MatchControllerRef ensures an object with the same controller reference
                          as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  policy:
                    description: '(Updatable) The network load balancer policy for
                      the backend set.  Example: `FIVE_TUPLE“'
                    type: string
                type: object
              initProvider:
                description: |-
                  THIS IS A BETA FIELD. It will be honored
                  unless the Management Policies feature flag is disabled.
                  InitProvider holds the same fields as ForProvider, with the exception
                  of Identifier and other resource reference fields. The fields that are
                  in InitProvider are merged into ForProvider when the resource is created.
                  The same fields are also added to the terraform ignore_changes hook, to
                  avoid updating them after creation. This is useful for fields that are
                  required on creation, but we do not desire to update them after creation,
                  for example because of an external controller is managing them, like an
                  autoscaler.
                properties:
                  areOperationallyActiveBackendsPreferred:
                    description: (Updatable) If enabled, NLB supports active-standby
                      backends. The standby backend takes over the traffic when the
                      active node fails, and continues to serve the traffic even when
                      the old active node is back healthy.
                    type: boolean
                  healthChecker:
                    description: (Updatable) The health check policy configuration.
                      For more information, see Editing Network Load Balancer Health
                      Check Policies.
                    items:
                      properties:
                        dns:
                          description: (Updatable) DNS healthcheck configurations.
                          items:
                            properties:
                              domainName:
                                description: (Updatable) The absolute fully-qualified
                                  domain name to perform periodic DNS queries. If
                                  not provided, an extra dot will be added at the
                                  end of a domain name during the query.
                                type: string
                              queryClass:
                                description: '(Updatable) The class the dns health
                                  check query to use; either IN or CH.  Example: IN'
                                type: string
                              queryType:
                                description: '(Updatable) The type the dns health
                                  check query to use; A, AAAA, TXT.  Example: A'
                                type: string
                              rcodes:
                                description: '(Updatable) An array that represents
                                  accepetable RCODE values for DNS query response.
                                  Example: ["NOERROR", "NXDOMAIN"]'
                                items:
                                  type: string
                                type: array
                              transportProtocol:
                                description: '(Updatable) DNS transport protocol;
                                  either UDP or TCP.  Example: UDP'
                                type: string
                            type: object
                          type: array
                        intervalInMillis:
                          description: '(Updatable) The interval between health checks,
                            in milliseconds. The default value is 10000 (10 seconds).  Example:
                            10000'
                          type: number
                        port:
                          description: '(Updatable) The communication port for the
                            backend server.  Example: 8080'
                          type: number
                        protocol:
                          description: '(Updatable) The protocol the health check
                            must use; either HTTP, HTTPS, UDP, TCP or DNS.  Example:
                            HTTP'
                          type: string
                        requestData:
                          description: (Updatable) Base64 encoded pattern to be sent
                            as UDP or TCP health check probe.
                          type: string
                        responseBodyRegex:
                          description: '(Updatable) A regular expression for parsing
                            the response body from the backend server.  Example: ^((?!false).|\s)*$'
                          type: string
                        responseData:
                          description: (Updatable) Base64 encoded pattern to be validated
                            as UDP or TCP health check probe response.
                          type: string
                        retries:
                          description: '(Updatable) The number of retries to attempt
                            before a backend server is considered "unhealthy". This
                            number also applies when recovering a server to the "healthy"
                            state. The default value is 3.  Example: 3'
                          type: number
                        returnCode:
                          description: '(Updatable) The status code a healthy backend
                            server should return. If you configure the health check
                            policy to use the HTTP protocol, then you can use common
                            HTTP status codes such as "200".  Example: 200'
                          type: number
                        timeoutInMillis:
                          description: '(Updatable) The maximum time, in milliseconds,
                            to wait for a reply to a health check. A health check
                            is successful only if a reply returns within this timeout
                            period. The default value is 3000 (3 seconds).  Example:
                            3000'
                          type: number
                        urlPath:
                          description: '(Updatable) The path against which to run
                            the health check.  Example: /healthcheck'
                          type: string
                      type: object
                    type: array
                  ipVersion:
                    description: (Updatable) IP version associated with the backend
                      set.
                    type: string
                  isFailOpen:
                    description: (Updatable) If enabled, the network load balancer
                      will continue to distribute traffic in the configured distribution
                      in the event all backends are unhealthy. The value is false
                      by default.
                    type: boolean
                  isInstantFailoverEnabled:
                    description: (Updatable) If enabled existing connections will
                      be forwarded to an alternative healthy backend as soon as current
                      backend becomes unhealthy.
                    type: boolean
                  isInstantFailoverTcpResetEnabled:
                    description: (Updatable) If enabled along with instant failover,
                      the network load balancer will send TCP RST to the clients for
                      the existing connections instead of failing over to a healthy
                      backend. This only applies when using the instant failover.
                      By default, TCP RST is enabled.
                    type: boolean
                  isPreserveSource:
                    description: (Updatable) If this parameter is enabled, then the
                      network load balancer preserves the source IP of the packet
                      when it is forwarded to backends. Backends see the original
                      source IP. If the isPreserveSourceDestination parameter is enabled
                      for the network load balancer resource, then this parameter
                      cannot be disabled. The value is true by default.
                    type: boolean
                  name:
                    description: '(Updatable) A read-only field showing the IP address/OCID
                      and port that uniquely identify this backend server in the backend
                      set.  Example: 10.0.0.3:8080, or ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>:443
                      or 10.0.0.3:0'
                    type: string
                  networkLoadBalancerId:
                    description: The OCID of the network load balancer to update.
                    type: string
                  networkLoadBalancerIdRef:
                    description: Reference to a NetworkLoadBalancer in networkloadbalancer
                      to populate networkLoadBalancerId.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  networkLoadBalancerIdSelector:
                    description: Selector for a NetworkLoadBalancer in networkloadbalancer
                      to populate networkLoadBalancerId.
                    properties:
                      matchControllerRef:
                        description: |-
                          MatchControllerRef ensures an object with the same controller reference
                          as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  policy:
                    description: '(Updatable) The network load balancer policy for
                      the backend set.  Example: `FIVE_TUPLE“'
                    type: string
                type: object
              managementPolicies:
                default:
                - '*'
                description: |-
                  THIS IS A BETA FIELD. It is on by default but can be opted out
                  through a Crossplane feature flag.
                  ManagementPolicies specify the array of actions Crossplane is allowed to
                  take on the managed and external resources.
                  This field is planned to replace the DeletionPolicy field in a future
                  release. Currently, both could be set independently and non-default
                  values would be honored if the feature flag is enabled. If both are
                  custom, the DeletionPolicy field will be ignored.
                  See the design doc for more information: https://github.com/crossplane/crossplane/blob/499895a25d1a1a0ba1604944ef98ac7a1a71f197/design/design-doc-observe-only-resources.md?plain=1#L223
                  and this one: https://github.com/crossplane/crossplane/blob/444267e84783136daa93568b364a5f01228cacbe/design/one-pager-ignore-changes.md
                items:
                  description: |-
                    A ManagementAction represents an action that the Crossplane controllers
                    can take on an external resource.
                  enum:
                  - Observe
                  - Create
                  - Update
                  - Delete
                  - LateInitialize
                  - '*'
                  type: string
                type: array
              providerConfigRef:
                default:
                  name: default
                description: |-
                  ProviderConfigReference specifies how the provider that will be used to
                  create, observe, update, and delete this managed resource should be
                  configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: |-
                          Resolution specifies whether resolution of this reference is required.
                          The default is 'Required', which means the reconcile will fail if the
                          reference cannot be resolved. 'Optional' means this reference will be
                          a no-op if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: |-
                          Resolve specifies when this reference should be resolved. The default
                          is 'IfNotPresent', which will attempt to resolve the reference only when
                          the corresponding field is not present. Use 'Always' to resolve the
                          reference on every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: |-
                  PublishConnectionDetailsTo specifies the connection secret config which
                  contains a name, metadata and a reference to secret store config to
                  which any connection details for this managed resource should be written.
                  Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: |-
                      SecretStoreConfigRef specifies which secret store config should be used
                      for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: |-
                              Resolution specifies whether resolution of this reference is required.
                              The default is 'Required', which means the reconcile will fail if the
                              reference cannot be resolved. 'Optional' means this reference will be
                              a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: |-
                              Resolve specifies when this reference should be resolved. The default
                              is 'IfNotPresent', which will attempt to resolve the reference only when
                              the corresponding field is not present. Use 'Always' to resolve the
                              reference on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: |-
                          Annotations are the annotations to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.annotations".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: |-
                          Labels are the labels/tags to be added to connection secret.
                          - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store types.
                        type: object
                      type:
                        description: |-
                          Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: |-
                  WriteConnectionSecretToReference specifies the namespace and name of a
                  Secret to which any connection details for this managed resource should
                  be written. Connection details frequently include the endpoint, username,
                  and password required to connect to the managed resource.
                  This field is planned to be replaced in a future release in favor of
                  PublishConnectionDetailsTo. Currently, both could be set independently
                  and connection details would be published to both without affecting
                  each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
            x-kubernetes-validations:
            - message: spec.forProvider.healthChecker is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.healthChecker)
                || (has(self.initProvider) && has(self.initProvider.healthChecker))'
            - message: spec.forProvider.name is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.name)
                || (has(self.initProvider) && has(self.initProvider.name))'
            - message: spec.forProvider.policy is a required parameter
              rule: '!(''*'' in self.managementPolicies || ''Create'' in self.managementPolicies
                || ''Update'' in self.managementPolicies) || has(self.forProvider.policy)
                || (has(self.initProvider) && has(self.initProvider.policy))'
          status:
            description: BackendSetStatus defines the observed state of BackendSet.
            properties:
              atProvider:
                properties:
                  areOperationallyActiveBackendsPreferred:
                    description: (Updatable) If enabled, NLB supports active-standby
                      backends. The standby backend takes over the traffic when the
                      active node fails, and continues to serve the traffic even when
                      the old active node is back healthy.
                    type: boolean
                  backends:
                    description: (Updatable) An array of backends to be associated
                      with the backend set.
                    items:
                      properties:
                        ipAddress:
                          description: '(Updatable) The IP address of the backend
                            server.  Example: 10.0.0.3'
                          type: string
                        isBackup:
                          description: '(Updatable) Whether the network load balancer
                            should treat this server as a backup unit. If true, then
                            the network load balancer forwards no ingress traffic
                            to this backend server unless all other backend servers
                            not marked as "isBackup" fail the health check policy.  Example:
                            false'
                          type: boolean
                        isDrain:
                          description: '(Updatable) Whether the network load balancer
                            should drain this server. Servers marked "isDrain" receive
                            no incoming traffic.  Example: false'
                          type: boolean
                        isOffline:
                          description: '(Updatable) Whether the network load balancer
                            should treat this server as offline. Offline servers receive
                            no incoming traffic.  Example: false'
                          type: boolean
                        name:
                          description: '(Updatable) A read-only field showing the
                            IP address/OCID and port that uniquely identify this backend
                            server in the backend set.  Example: 10.0.0.3:8080, or
                            ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>:443
                            or 10.0.0.3:0'
                          type: string
                        port:
                          description: '(Updatable) The communication port for the
                            backend server.  Example: 8080'
                          type: number
                        targetId:
                          description: '(Updatable) The IP OCID/Instance OCID associated
                            with the backend server. Example: ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>'
                          type: string
                        weight:
                          description: '(Updatable) The network load balancing policy
                            weight assigned to the server. Backend servers with a
                            higher weight receive a larger proportion of incoming
                            traffic. For example, a server weighted ''3'' receives
                            three times the number of new connections as a server
                            weighted ''1''. For more information about load balancing
                            policies, see Network Load Balancer Policies.  Example:
                            3'
                          type: number
                      type: object
                    type: array
                  healthChecker:
                    description: (Updatable) The health check policy configuration.
                      For more information, see Editing Network Load Balancer Health
                      Check Policies.
                    items:
                      properties:
                        dns:
                          description: (Updatable) DNS healthcheck configurations.
                          items:
                            properties:
                              domainName:
                                description: (Updatable) The absolute fully-qualified
                                  domain name to perform periodic DNS queries. If
                                  not provided, an extra dot will be added at the
                                  end of a domain name during the query.
                                type: string
                              queryClass:
                                description: '(Updatable) The class the dns health
                                  check query to use; either IN or CH.  Example: IN'
                                type: string
                              queryType:
                                description: '(Updatable) The type the dns health
                                  check query to use; A, AAAA, TXT.  Example: A'
                                type: string
                              rcodes:
                                description: '(Updatable) An array that represents
                                  accepetable RCODE values for DNS query response.
                                  Example: ["NOERROR", "NXDOMAIN"]'
                                items:
                                  type: string
                                type: array
                              transportProtocol:
                                description: '(Updatable) DNS transport protocol;
                                  either UDP or TCP.  Example: UDP'
                                type: string
                            type: object
                          type: array
                        intervalInMillis:
                          description: '(Updatable) The interval between health checks,
                            in milliseconds. The default value is 10000 (10 seconds).  Example:
                            10000'
                          type: number
                        port:
                          description: '(Updatable) The communication port for the
                            backend server.  Example: 8080'
                          type: number
                        protocol:
                          description: '(Updatable) The protocol the health check
                            must use; either HTTP, HTTPS, UDP, TCP or DNS.  Example:
                            HTTP'
                          type: string
                        requestData:
                          description: (Updatable) Base64 encoded pattern to be sent
                            as UDP or TCP health check probe.
                          type: string
                        responseBodyRegex:
                          description: '(Updatable) A regular expression for parsing
                            the response body from the backend server.  Example: ^((?!false).|\s)*$'
                          type: string
                        responseData:
                          description: (Updatable) Base64 encoded pattern to be validated
                            as UDP or TCP health check probe response.
                          type: string
                        retries:
                          description: '(Updatable) The number of retries to attempt
                            before a backend server is considered "unhealthy". This
                            number also applies when recovering a server to the "healthy"
                            state. The default value is 3.  Example: 3'
                          type: number
                        returnCode:
                          description: '(Updatable) The status code a healthy backend
                            server should return. If you configure the health check
                            policy to use the HTTP protocol, then you can use common
                            HTTP status codes such as "200".  Example: 200'
                          type: number
                        timeoutInMillis:
                          description: '(Updatable) The maximum time, in milliseconds,
                            to wait for a reply to a health check. A health check
                            is successful only if a reply returns within this timeout
                            period. The default value is 3000 (3 seconds).  Example:
                            3000'
                          type: number
                        urlPath:
                          description: '(Updatable) The path against which to run
                            the health check.  Example: /healthcheck'
                          type: string
                      type: object
                    type: array
                  id:
                    type: string
                  ipVersion:
                    description: (Updatable) IP version associated with the backend
                      set.
                    type: string
                  isFailOpen:
                    description: (Updatable) If enabled, the network load balancer
                      will continue to distribute traffic in the configured distribution
                      in the event all backends are unhealthy. The value is false
                      by default.
                    type: boolean
                  isInstantFailoverEnabled:
                    description: (Updatable) If enabled existing connections will
                      be forwarded to an alternative healthy backend as soon as current
                      backend becomes unhealthy.
                    type: boolean
                  isInstantFailoverTcpResetEnabled:
                    description: (Updatable) If enabled along with instant failover,
                      the network load balancer will send TCP RST to the clients for
                      the existing connections instead of failing over to a healthy
                      backend. This only applies when using the instant failover.
                      By default, TCP RST is enabled.
                    type: boolean
                  isPreserveSource:
                    description: (Updatable) If this parameter is enabled, then the
                      network load balancer preserves the source IP of the packet
                      when it is forwarded to backends. Backends see the original
                      source IP. If the isPreserveSourceDestination parameter is enabled
                      for the network load balancer resource, then this parameter
                      cannot be disabled. The value is true by default.
                    type: boolean
                  name:
                    description: '(Updatable) A read-only field showing the IP address/OCID
                      and port that uniquely identify this backend server in the backend
                      set.  Example: 10.0.0.3:8080, or ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>:443
                      or 10.0.0.3:0'
                    type: string
                  networkLoadBalancerId:
                    description: The OCID of the network load balancer to update.
                    type: string
                  policy:
                    description: '(Updatable) The network load balancer policy for
                      the backend set.  Example: `FIVE_TUPLE“'
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: |-
                        LastTransitionTime is the last time this condition transitioned from one
                        status to another.
                      format: date-time
                      type: string
                    message:
                      description: |-
                        A Message containing details about this condition's last transition from
                        one status to another, if any.
                      type: string
                    observedGeneration:
                      description: |-
                        ObservedGeneration represents the .metadata.generation that the condition was set based upon.
                        For instance, if .metadata.generation is currently 12, but the .status.conditions[x].observedGeneration is 9, the condition is out of date
                        with respect to the current state of the instance.
                      format: int64
                      type: integer
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: |-
                        Type of this condition. At most one of each condition type may apply to
                        a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
                x-kubernetes-list-map-keys:
                - type
                x-kubernetes-list-type: map
              observedGeneration:
                description: |-
                  ObservedGeneration is the latest metadata.generation
                  which resulted in either a ready state, or stalled due to error
                  it can not recover from without human intervention.
                format: int64
                type: integer
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
